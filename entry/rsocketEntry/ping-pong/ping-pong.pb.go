// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ping-pong.proto

package ping_pong

import (
	context "context"
	errors "errors"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	scheduler "github.com/jjeffcaii/reactor-go/scheduler"
	rsocket_go "github.com/rsocket/rsocket-go"
	payload "github.com/rsocket/rsocket-go/payload"
	rx "github.com/rsocket/rsocket-go/rx"
	flux "github.com/rsocket/rsocket-go/rx/flux"
	mono "github.com/rsocket/rsocket-go/rx/mono"
	rsocket_rpc_go "github.com/rsocket/rsocket-rpc-go"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ping struct {
	Ball                 string   `protobuf:"bytes,1,opt,name=ball,proto3" json:"ball,omitempty"`
	AnotherBall          string   `protobuf:"bytes,2,opt,name=anotherBall,proto3" json:"anotherBall,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_62311b0d1f5d3673, []int{0}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetBall() string {
	if m != nil {
		return m.Ball
	}
	return ""
}

func (m *Ping) GetAnotherBall() string {
	if m != nil {
		return m.AnotherBall
	}
	return ""
}

type Pong struct {
	Ball                 string   `protobuf:"bytes,1,opt,name=ball,proto3" json:"ball,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_62311b0d1f5d3673, []int{1}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetBall() string {
	if m != nil {
		return m.Ball
	}
	return ""
}

func init() {
	proto.RegisterType((*Ping)(nil), "ping_pong.Ping")
	proto.RegisterType((*Pong)(nil), "ping_pong.Pong")
}

func init() { proto.RegisterFile("ping-pong.proto", fileDescriptor_62311b0d1f5d3673) }

var fileDescriptor_62311b0d1f5d3673 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0xc8, 0xcc, 0x4b,
	0xd7, 0x2d, 0xc8, 0xcf, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x04, 0x09, 0xc4,
	0x83, 0x04, 0x94, 0x6c, 0xb8, 0x58, 0x02, 0x32, 0xf3, 0xd2, 0x85, 0x84, 0xb8, 0x58, 0x92, 0x12,
	0x73, 0x72, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x05, 0x2e, 0xee, 0xc4,
	0xbc, 0xfc, 0x92, 0x8c, 0xd4, 0x22, 0x27, 0x90, 0x14, 0x13, 0x58, 0x0a, 0x59, 0x48, 0x49, 0x8a,
	0x8b, 0x25, 0x20, 0x1f, 0xbb, 0x6e, 0xa3, 0x7e, 0x26, 0x2e, 0x0e, 0x90, 0xd1, 0x60, 0x05, 0x5a,
	0x5c, 0x2c, 0x20, 0x3b, 0x85, 0xf8, 0xf5, 0xe0, 0x56, 0xeb, 0x81, 0x24, 0xa5, 0x50, 0x04, 0x40,
	0x0e, 0x62, 0x10, 0xd2, 0xe6, 0x62, 0x05, 0x89, 0x19, 0x11, 0xa5, 0xd8, 0x98, 0x8b, 0x3b, 0x27,
	0xbf, 0xa4, 0xd8, 0x3f, 0x0d, 0xc4, 0x2f, 0x26, 0x46, 0x8b, 0x01, 0xa3, 0x90, 0x09, 0x17, 0x0f,
	0x92, 0x26, 0x23, 0x22, 0x75, 0xd9, 0x73, 0x89, 0x16, 0xe5, 0x97, 0x16, 0x67, 0xe6, 0xa5, 0xbb,
	0x27, 0xe6, 0xa6, 0xfa, 0xa7, 0xc1, 0x3d, 0x47, 0x84, 0x76, 0x0d, 0x46, 0x03, 0x46, 0x27, 0x51,
	0x2e, 0xe1, 0xe4, 0xfc, 0x5c, 0xbd, 0xd4, 0x8a, 0xc4, 0xdc, 0x82, 0x9c, 0x54, 0xbd, 0xa2, 0xa2,
	0x82, 0x64, 0xbd, 0x82, 0xa4, 0x24, 0x36, 0x70, 0xa4, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0xce, 0x88, 0x1b, 0xd4, 0xa7, 0x01, 0x00, 0x00,
}
var _ context.Context
var _ rsocket_rpc_go.ClientConn
var _ rsocket_go.RSocket
var _ rx.Subscription
var _ flux.Flux
var _ mono.Mono
var _ payload.Payload
var _ scheduler.Scheduler

// -- Constants
const PingPongServiceName = "ping_pong.PingPong"
const pingFunctionName = "ping"
const ping2FunctionName = "ping2"
const lotsOfPongsFunctionName = "lotsOfPongs"
const lotsOfPongs2FunctionName = "lotsOfPongs2"
const rousingGameOfPingPongFunctionName = "rousingGameOfPingPong"

// -- client start
type PingPongClient interface {
	Ping(ctx context.Context, in *Ping, opts ...rsocket_rpc_go.CallOption) (<-chan *Pong, <-chan error)

	Ping2(ctx context.Context, in *Ping, opts ...rsocket_rpc_go.CallOption) (<-chan *Pong, <-chan error)

	LotsOfPongs(ctx context.Context, in *Ping, opts ...rsocket_rpc_go.CallOption) (<-chan *Pong, <-chan error)

	LotsOfPongs2(ctx context.Context, in *Ping, opts ...rsocket_rpc_go.CallOption) (<-chan *Pong, <-chan error)

	RousingGameOfPingPong(ctx context.Context, in chan *Ping, err chan error, opts ...rsocket_rpc_go.CallOption) (<-chan *Pong, <-chan error)
}

type PingPongClientStruct struct {
	PingPongClient
	client rsocket_rpc_go.ClientConn
}

func (c *PingPongClientStruct) Ping(ctx context.Context, in *Ping, opts ...rsocket_rpc_go.CallOption) (<-chan *Pong, <-chan error) {
	response := make(chan *Pong, 1)
	err := make(chan error, 1)
	defer func() {
		close(response)
		close(err)
	}()
	d, e := proto.Marshal(in)
	if e != nil {
		return nil, err
	}

	payloads, errors := c.client.InvokeRequestResponse(ctx, PingPongServiceName, pingFunctionName, &d, opts...)
loop:
	for {
		select {
		case p, ok := <-payloads:
			if ok {
				i := payload.Payload(p)
				data := i.Data()
				res := &Pong{}
				e := proto.Unmarshal(data, res)
				if e != nil {
					err <- e
					break loop
				} else {
					response <- res
				}
			} else {
				break loop
			}
		case e := <-errors:
			if err != nil {
				err <- e
				break loop
			}
		}
	}

	return response, err
}

func (c *PingPongClientStruct) Ping2(ctx context.Context, in *Ping, opts ...rsocket_rpc_go.CallOption) (<-chan *Pong, <-chan error) {
	response := make(chan *Pong, 1)
	err := make(chan error, 1)
	defer func() {
		close(response)
		close(err)
	}()
	d, e := proto.Marshal(in)
	if e != nil {
		return nil, err
	}

	payloads, errors := c.client.InvokeRequestResponse(ctx, PingPongServiceName, ping2FunctionName, &d, opts...)
loop:
	for {
		select {
		case p, ok := <-payloads:
			if ok {
				i := payload.Payload(p)
				data := i.Data()
				res := &Pong{}
				e := proto.Unmarshal(data, res)
				if e != nil {
					err <- e
					break loop
				} else {
					response <- res
				}
			} else {
				break loop
			}
		case e := <-errors:
			if err != nil {
				err <- e
				break loop
			}
		}
	}

	return response, err
}

func (c *PingPongClientStruct) LotsOfPongs(ctx context.Context, in *Ping, opts ...rsocket_rpc_go.CallOption) (<-chan *Pong, <-chan error) {
	err := make(chan error)
	d, e := proto.Marshal(in)
	if e != nil {
		close(err)
		return nil, err
	}
	payloads, errors := c.client.InvokeRequestStream(ctx, PingPongServiceName, lotsOfPongsFunctionName, &d, opts...)
	response := make(chan *Pong, len(payloads))
	scheduler.Parallel().Worker().Do(func() {
		defer func() {
			close(response)
			close(err)
		}()
	loop:
		for {
			select {
			case p, ok := <-payloads:
				if ok {
					i := payload.Payload(p)
					data := i.Data()
					res := &Pong{}
					e := proto.Unmarshal(data, res)
					if e != nil {
						err <- e
						break loop
					} else {
						response <- res
					}
				} else {
					break loop
				}
			case e := <-errors:
				err <- e
				break loop
			}
		}

	})
	return response, err
}

func (c *PingPongClientStruct) LotsOfPongs2(ctx context.Context, in *Ping, opts ...rsocket_rpc_go.CallOption) (<-chan *Pong, <-chan error) {
	err := make(chan error)
	d, e := proto.Marshal(in)
	if e != nil {
		close(err)
		return nil, err
	}
	payloads, errors := c.client.InvokeRequestStream(ctx, PingPongServiceName, lotsOfPongs2FunctionName, &d, opts...)
	response := make(chan *Pong, len(payloads))
	scheduler.Parallel().Worker().Do(func() {
		defer func() {
			close(response)
			close(err)
		}()
	loop:
		for {
			select {
			case p, ok := <-payloads:
				if ok {
					i := payload.Payload(p)
					data := i.Data()
					res := &Pong{}
					e := proto.Unmarshal(data, res)
					if e != nil {
						err <- e
						break loop
					} else {
						response <- res
					}
				} else {
					break loop
				}
			case e := <-errors:
				err <- e
				break loop
			}
		}

	})
	return response, err
}

func (c *PingPongClientStruct) RousingGameOfPingPong(ctx context.Context, in chan *Ping, err chan error, opts ...rsocket_rpc_go.CallOption) (<-chan *Pong, <-chan error) {
	bytesin := make(chan *[]byte)
	errin := make(chan error)
	scheduler.Parallel().Worker().Do(func() {
		defer close(bytesin)
		defer close(errin)
	loop:
		for {
			select {
			case p, o := <-in:
				if o {
					d, e := proto.Marshal(p)
					if e != nil {
						errin <- e
						break loop
					} else {
						bytesin <- &d
					}
				} else {
					break loop
				}
			case e := <-err:
				if e != nil {
					errin <- e
				}
			}
		}
	})
	payloads, chanerrors := c.client.InvokeChannel(ctx, PingPongServiceName, rousingGameOfPingPongFunctionName, bytesin, errin, opts...)
	payloadsout := make(chan *Pong, len(payloads))
	errout := make(chan error)
	scheduler.Parallel().Worker().Do(func() {
		defer func() {
			close(payloadsout)
			close(errout)
		}()
	loop:
		for {
			select {
			case p, ok := <-payloads:
				if ok {
					i := payload.Payload(p)
					data := i.Data()
					res := &Pong{}
					e := proto.Unmarshal(data, res)
					if e != nil {
						err <- e
						break loop
					} else {
						payloadsout <- res
					}
				} else {
					break loop
				}
			case e := <-chanerrors:
				if err != nil {
					err <- e
					break loop
				}
			}
		}
	})
	return payloadsout, errout
}

func NewPingPongClient(s rsocket_go.RSocket, m rsocket_rpc_go.MeterRegistry, t rsocket_rpc_go.Tracer) PingPongClient {
	cc := *rsocket_rpc_go.NewClientConn(s, m, t)
	return &PingPongClientStruct{client: cc}
}

// -- client end

// -- server start
type PingPong interface {
	Ping(context.Context, *Ping, []byte) (<-chan *Pong, <-chan error)
	Ping2(context.Context, *Ping, []byte) (<-chan *Pong, <-chan error)
	LotsOfPongs(context.Context, *Ping, []byte) (<-chan *Pong, <-chan error)
	LotsOfPongs2(context.Context, *Ping, []byte) (<-chan *Pong, <-chan error)
	RousingGameOfPingPong(context.Context, chan *Ping, chan error, []byte) (<-chan *Pong, <-chan error)
}

type PingPongServer struct {
	pp PingPong
	rsocket_rpc_go.RrpcRSocket
}

func (p *PingPongServer) Name() string {
	return PingPongServiceName
}

func (p *PingPongServer) RequestResponse(msg payload.Payload) mono.Mono {
	return mono.Create(func(ctx context.Context, sink mono.Sink) {
		d := msg.Data()
		m, ok := msg.Metadata()
		if !ok {
			sink.Error(errors.New("RSocket rpc: missing metadata in Payload for PingPong service"))
			return
		}
		metadata := (rsocket_rpc_go.Metadata)(m)
		method := metadata.Method()
		ud := metadata.Metadata()
		switch method {
		case pingFunctionName:
			_in0 := &Ping{}
			e := proto.Unmarshal(d, _in0)
			if e != nil {
				sink.Error(e)
				return
			}
			defer func() {
				if err := recover(); err != nil {
					sink.Error(fmt.Errorf("Error calling %s function: %s", pingFunctionName, err))
				}
			}()
			_out0, err := p.pp.Ping(ctx, _in0, ud)
		_loop0:
			for {
				select {
				case <-ctx.Done():
				case r, ok := <-_out0:
					if ok {
						bytes, e := proto.Marshal(r)
						if e != nil {
							sink.Error(e)
						} else {
							sink.Success(payload.New(bytes, nil))
							break _loop0
						}
					} else {
						break _loop0
					}
				case e := <-err:
					if e != nil {
						sink.Error(e)
					}
				}
			}
		case ping2FunctionName:
			_in1 := &Ping{}
			e := proto.Unmarshal(d, _in1)
			if e != nil {
				sink.Error(e)
				return
			}
			defer func() {
				if err := recover(); err != nil {
					sink.Error(fmt.Errorf("Error calling %s function: %s", ping2FunctionName, err))
				}
			}()
			_out1, err := p.pp.Ping2(ctx, _in1, ud)
		_loop1:
			for {
				select {
				case <-ctx.Done():
				case r, ok := <-_out1:
					if ok {
						bytes, e := proto.Marshal(r)
						if e != nil {
							sink.Error(e)
						} else {
							sink.Success(payload.New(bytes, nil))
							break _loop1
						}
					} else {
						break _loop1
					}
				case e := <-err:
					if e != nil {
						sink.Error(e)
					}
				}
			}
		}
	})
}

func (p *PingPongServer) RequestStream(msg payload.Payload) flux.Flux {
	d := msg.Data()
	m, ok := msg.Metadata()
	if !ok {
		return flux.Error(errors.New("RSocket rpc: missing metadata in Payload for PingPong service"))
	}

	metadata := (rsocket_rpc_go.Metadata)(m)
	method := metadata.Method()

	ud := metadata.Metadata()
	switch method {
	case lotsOfPongsFunctionName:
		_in2 := &Ping{}
		e := proto.Unmarshal(d, _in2)
		if e != nil {
			return flux.Error(e)
		}

		ctx := context.Background()
		_out2, errors := p.pp.LotsOfPongs(ctx, _in2, ud)
		payloads := make(chan payload.Payload)
		chanerrors := make(chan error)
		scheduler.Parallel().Worker().Do(func() {
			defer func() {
				close(payloads)
				close(chanerrors)
			}()
		loop:
			for {
				select {
				case <-ctx.Done():
				case r, ok := <-_out2:
					if ok {
						bytes, e := proto.Marshal(r)
						p := payload.New(bytes, nil)
						payloads <- p
						if e != nil {
							chanerrors <- e
							break loop
						}
					} else {
						break loop
					}
				case e := <-errors:
					chanerrors <- e
					break loop
				}
			}
		})
		return flux.CreateFromChannel(payloads, chanerrors)
	case lotsOfPongs2FunctionName:
		_in3 := &Ping{}
		e := proto.Unmarshal(d, _in3)
		if e != nil {
			return flux.Error(e)
		}

		ctx := context.Background()
		_out3, errors := p.pp.LotsOfPongs2(ctx, _in3, ud)
		payloads := make(chan payload.Payload)
		chanerrors := make(chan error)
		scheduler.Parallel().Worker().Do(func() {
			defer func() {
				close(payloads)
				close(chanerrors)
			}()
		loop:
			for {
				select {
				case <-ctx.Done():
				case r, ok := <-_out3:
					if ok {
						bytes, e := proto.Marshal(r)
						p := payload.New(bytes, nil)
						payloads <- p
						if e != nil {
							chanerrors <- e
							break loop
						}
					} else {
						break loop
					}
				case e := <-errors:
					chanerrors <- e
					break loop
				}
			}
		})
		return flux.CreateFromChannel(payloads, chanerrors)
	default:
		return flux.Error(fmt.Errorf("unknown method %s", method))
	}
}

func (p *PingPongServer) RequestChannel(msgs rx.Publisher) flux.Flux {
	return flux.Clone(msgs).SwitchOnFirst(func(s flux.Signal, f flux.Flux) flux.Flux {
		msg, ok := s.Value()
		if !ok {
			return flux.Error(errors.New("RSocket rpc: missing payload to switch request on"))
		}
		d := msg.Data()
		m, ok := msg.Metadata()
		if !ok {
			return flux.Error(errors.New("RSocket rpc: missing metadata in Payload for PingPong service"))
		}
		metadata := (rsocket_rpc_go.Metadata)(m)
		method := metadata.Method()
		ud := metadata.Metadata()
		switch method {
		case rousingGameOfPingPongFunctionName:
			_in4 := &Ping{}
			e := proto.Unmarshal(d, _in4)
			if e != nil {
				return flux.Error(e)
			}

			ctx := context.Background()
			inchan := make(chan *Ping)
			inerr := make(chan error)
			var sub rx.Subscription
			f.DoOnSubscribe(func(s rx.Subscription) {
				sub = s
			}).SubscribeOn(scheduler.Parallel()).
				DoOnNext(func(input payload.Payload) {
					_in5 := &Ping{}
					e := proto.Unmarshal(d, _in5)
					if e != nil {
						inerr <- e
						if sub != nil {
							sub.Cancel()
						}
					} else {
						inchan <- _in5
					}
				}).
				DoOnError(func(e error) {
					inerr <- e
				}).
				DoFinally(func(s rx.SignalType) {
					close(inchan)
					close(inerr)
				}).Subscribe(ctx)

			outchan, outerr := p.pp.RousingGameOfPingPong(ctx, inchan, inerr, ud)
			return flux.Create(func(ctx context.Context, sink flux.Sink) {
			loop:
				for {
					select {
					case i, o := <-outchan:
						if o {
							bytes, e := proto.Marshal(i)
							if e != nil {
								sink.Error(e)
								break loop
							}
							p := payload.New(bytes, nil)
							sink.Next(p)
						} else {
							break loop
						}
					case err := <-outerr:
						if err != nil {
							sink.Error(err)
						}
					}
				}
			})
		default:
			return flux.Error(fmt.Errorf("unknown method %s", method))
		}
	})
}

func NewPingPongServer(p PingPong) *PingPongServer {
	return &PingPongServer{
		pp: p,
	}
}
