// Code generated by protoc-gen-lug. DO NOT EDIT.
// source: proto/gid/id.proto

package gid

import (
	"reflect"
	"strings"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/utils"
	fb "github.com/pubgo/lug/pkg/builder/fiber"
	"github.com/pubgo/lug/pkg/gutil"
	"github.com/pubgo/lug/plugins/grpcc"
	"github.com/pubgo/lug/xgen"
	"github.com/pubgo/xerror"
	"google.golang.org/protobuf/types/known/structpb"
)

var _ = strings.Trim
var _ = utils.UnsafeString
var _ fiber.Router = nil
var _ = gutil.MapFormByTag
var _ = fb.Cfg{}
var _ = structpb.Value{}

func GetIdClient(srv string, opts ...func(cfg *grpcc.Cfg)) func(func(cli IdClient)) error {
	client := grpcc.GetClient(srv, opts...)
	return func(fn func(cli IdClient)) (err error) {
		defer xerror.RespErr(&err)

		c, err := client.Get()
		if err != nil {
			return xerror.WrapF(err, "srv: %s", srv)
		}

		fn(&idClient{c})
		return
	}
}

func init() {
	var mthList []xgen.GrpcRestHandler

	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &GenerateRequest{},
		Output:       &GenerateResponse{},
		Service:      "gid.Id",
		Name:         "Generate",
		Method:       "POST",
		Path:         "/v1/id/generate",
		ClientStream: "False" == "True",
		ServerStream: "False" == "True",
		DefaultUrl:   "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &TypesRequest{},
		Output:       &TypesResponse{},
		Service:      "gid.Id",
		Name:         "Types",
		Method:       "GET",
		Path:         "/v1/id/types",
		ClientStream: "False" == "True",
		ServerStream: "False" == "True",
		DefaultUrl:   "False" == "True",
	})

	xgen.Add(reflect.ValueOf(RegisterIdServer), mthList)
	xgen.Add(reflect.ValueOf(RegisterIdRestServer), nil)
	xgen.Add(reflect.ValueOf(RegisterIdHandler), RegisterIdServer)
}

func RegisterIdRestServer(app fiber.Router, server IdServer) {
	xerror.Assert(app == nil || server == nil, "app is nil or server is nil")

	// restful
	app.Add("POST", "/v1/id/generate", func(ctx *fiber.Ctx) error {
		var req = new(GenerateRequest)
		if err := ctx.BodyParser(req); err != nil {
			return xerror.Wrap(err)
		}

		var resp, err = server.Generate(ctx.UserContext(), req)
		if err != nil {
			return xerror.Wrap(err)
		}

		return xerror.Wrap(ctx.JSON(resp))
	})

	// restful
	app.Add("GET", "/v1/id/types", func(ctx *fiber.Ctx) error {
		var req = new(TypesRequest)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := utils.UnsafeString(key)
			v := utils.UnsafeString(val)
			if strings.Contains(v, ",") && gutil.EqualFieldType(req, reflect.Slice, k) {
				values := strings.Split(v, ",")
				for i := 0; i < len(values); i++ {
					data[k] = append(data[k], values[i])
				}
			} else {
				data[k] = append(data[k], v)
			}
		})
		xerror.Panic(gutil.MapFormByTag(req, data, "json"))
		var resp, err = server.Types(ctx.UserContext(), req)
		if err != nil {
			return xerror.Wrap(err)
		}

		return xerror.Wrap(ctx.JSON(resp))
	})

}
