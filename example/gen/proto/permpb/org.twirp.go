// Code generated by protoc-gen-twirp v8.1.2, DO NOT EDIT.
// source: perm/v1/org.proto

package permpb

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ====================
// OrgService Interface
// ====================

// org grpc service, OrgSrv provides org info inside RBAC instead of global
type OrgService interface {
	// CreateOrg init org, create org role and bind all function permissions, the method is idempotent
	// {org_id} is required
	// when {user_id} is set, {user_id} will be admin
	CreateOrg(context.Context, *CreateOrgRequest) (*CreateOrgResponse, error)

	// delete org all perms and data
	// {org_id} is required
	DeleteOrg(context.Context, *DeleteOrgRequest) (*DeleteOrgResponse, error)

	// transfer org admin to {new_user_id}, then {user_id} will only lose the admin role, and other roles will be retained
	// all parameters are required
	TransferOrg(context.Context, *TransferOrgRequest) (*TransferOrgResponse, error)

	// list all org
	ListOrg(context.Context, *ListOrgRequest) (*ListOrgResponse, error)
}

// ==========================
// OrgService Protobuf Client
// ==========================

type orgServiceProtobufClient struct {
	client      HTTPClient
	urls        [4]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewOrgServiceProtobufClient creates a Protobuf client that implements the OrgService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewOrgServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) OrgService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "perm.v1", "OrgService")
	urls := [4]string{
		serviceURL + "CreateOrg",
		serviceURL + "DeleteOrg",
		serviceURL + "TransferOrg",
		serviceURL + "ListOrg",
	}

	return &orgServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *orgServiceProtobufClient) CreateOrg(ctx context.Context, in *CreateOrgRequest) (*CreateOrgResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "OrgService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrg")
	caller := c.callCreateOrg
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateOrgRequest) (*CreateOrgResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateOrgRequest) when calling interceptor")
					}
					return c.callCreateOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *orgServiceProtobufClient) callCreateOrg(ctx context.Context, in *CreateOrgRequest) (*CreateOrgResponse, error) {
	out := new(CreateOrgResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *orgServiceProtobufClient) DeleteOrg(ctx context.Context, in *DeleteOrgRequest) (*DeleteOrgResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "OrgService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteOrg")
	caller := c.callDeleteOrg
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteOrgRequest) (*DeleteOrgResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteOrgRequest) when calling interceptor")
					}
					return c.callDeleteOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *orgServiceProtobufClient) callDeleteOrg(ctx context.Context, in *DeleteOrgRequest) (*DeleteOrgResponse, error) {
	out := new(DeleteOrgResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *orgServiceProtobufClient) TransferOrg(ctx context.Context, in *TransferOrgRequest) (*TransferOrgResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "OrgService")
	ctx = ctxsetters.WithMethodName(ctx, "TransferOrg")
	caller := c.callTransferOrg
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *TransferOrgRequest) (*TransferOrgResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TransferOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TransferOrgRequest) when calling interceptor")
					}
					return c.callTransferOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TransferOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TransferOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *orgServiceProtobufClient) callTransferOrg(ctx context.Context, in *TransferOrgRequest) (*TransferOrgResponse, error) {
	out := new(TransferOrgResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *orgServiceProtobufClient) ListOrg(ctx context.Context, in *ListOrgRequest) (*ListOrgResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "OrgService")
	ctx = ctxsetters.WithMethodName(ctx, "ListOrg")
	caller := c.callListOrg
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListOrgRequest) (*ListOrgResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListOrgRequest) when calling interceptor")
					}
					return c.callListOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *orgServiceProtobufClient) callListOrg(ctx context.Context, in *ListOrgRequest) (*ListOrgResponse, error) {
	out := new(ListOrgResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ======================
// OrgService JSON Client
// ======================

type orgServiceJSONClient struct {
	client      HTTPClient
	urls        [4]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewOrgServiceJSONClient creates a JSON client that implements the OrgService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewOrgServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) OrgService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "perm.v1", "OrgService")
	urls := [4]string{
		serviceURL + "CreateOrg",
		serviceURL + "DeleteOrg",
		serviceURL + "TransferOrg",
		serviceURL + "ListOrg",
	}

	return &orgServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *orgServiceJSONClient) CreateOrg(ctx context.Context, in *CreateOrgRequest) (*CreateOrgResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "OrgService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrg")
	caller := c.callCreateOrg
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateOrgRequest) (*CreateOrgResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateOrgRequest) when calling interceptor")
					}
					return c.callCreateOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *orgServiceJSONClient) callCreateOrg(ctx context.Context, in *CreateOrgRequest) (*CreateOrgResponse, error) {
	out := new(CreateOrgResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *orgServiceJSONClient) DeleteOrg(ctx context.Context, in *DeleteOrgRequest) (*DeleteOrgResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "OrgService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteOrg")
	caller := c.callDeleteOrg
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteOrgRequest) (*DeleteOrgResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteOrgRequest) when calling interceptor")
					}
					return c.callDeleteOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *orgServiceJSONClient) callDeleteOrg(ctx context.Context, in *DeleteOrgRequest) (*DeleteOrgResponse, error) {
	out := new(DeleteOrgResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *orgServiceJSONClient) TransferOrg(ctx context.Context, in *TransferOrgRequest) (*TransferOrgResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "OrgService")
	ctx = ctxsetters.WithMethodName(ctx, "TransferOrg")
	caller := c.callTransferOrg
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *TransferOrgRequest) (*TransferOrgResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TransferOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TransferOrgRequest) when calling interceptor")
					}
					return c.callTransferOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TransferOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TransferOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *orgServiceJSONClient) callTransferOrg(ctx context.Context, in *TransferOrgRequest) (*TransferOrgResponse, error) {
	out := new(TransferOrgResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *orgServiceJSONClient) ListOrg(ctx context.Context, in *ListOrgRequest) (*ListOrgResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "OrgService")
	ctx = ctxsetters.WithMethodName(ctx, "ListOrg")
	caller := c.callListOrg
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListOrgRequest) (*ListOrgResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListOrgRequest) when calling interceptor")
					}
					return c.callListOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *orgServiceJSONClient) callListOrg(ctx context.Context, in *ListOrgRequest) (*ListOrgResponse, error) {
	out := new(ListOrgResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =========================
// OrgService Server Handler
// =========================

type orgServiceServer struct {
	OrgService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewOrgServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewOrgServiceServer(svc OrgService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &orgServiceServer{
		OrgService:       svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *orgServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *orgServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// OrgServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const OrgServicePathPrefix = "/twirp/perm.v1.OrgService/"

func (s *orgServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "OrgService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "perm.v1.OrgService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "CreateOrg":
		s.serveCreateOrg(ctx, resp, req)
		return
	case "DeleteOrg":
		s.serveDeleteOrg(ctx, resp, req)
		return
	case "TransferOrg":
		s.serveTransferOrg(ctx, resp, req)
		return
	case "ListOrg":
		s.serveListOrg(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *orgServiceServer) serveCreateOrg(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateOrgJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateOrgProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orgServiceServer) serveCreateOrgJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrg")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateOrgRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.OrgService.CreateOrg
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateOrgRequest) (*CreateOrgResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateOrgRequest) when calling interceptor")
					}
					return s.OrgService.CreateOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateOrgResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateOrgResponse and nil error while calling CreateOrg. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orgServiceServer) serveCreateOrgProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateOrg")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateOrgRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.OrgService.CreateOrg
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateOrgRequest) (*CreateOrgResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateOrgRequest) when calling interceptor")
					}
					return s.OrgService.CreateOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateOrgResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateOrgResponse and nil error while calling CreateOrg. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orgServiceServer) serveDeleteOrg(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteOrgJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteOrgProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orgServiceServer) serveDeleteOrgJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteOrg")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteOrgRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.OrgService.DeleteOrg
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteOrgRequest) (*DeleteOrgResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteOrgRequest) when calling interceptor")
					}
					return s.OrgService.DeleteOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteOrgResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteOrgResponse and nil error while calling DeleteOrg. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orgServiceServer) serveDeleteOrgProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteOrg")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteOrgRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.OrgService.DeleteOrg
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteOrgRequest) (*DeleteOrgResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteOrgRequest) when calling interceptor")
					}
					return s.OrgService.DeleteOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteOrgResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteOrgResponse and nil error while calling DeleteOrg. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orgServiceServer) serveTransferOrg(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTransferOrgJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTransferOrgProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orgServiceServer) serveTransferOrgJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TransferOrg")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(TransferOrgRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.OrgService.TransferOrg
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *TransferOrgRequest) (*TransferOrgResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TransferOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TransferOrgRequest) when calling interceptor")
					}
					return s.OrgService.TransferOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TransferOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TransferOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TransferOrgResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TransferOrgResponse and nil error while calling TransferOrg. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orgServiceServer) serveTransferOrgProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TransferOrg")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(TransferOrgRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.OrgService.TransferOrg
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *TransferOrgRequest) (*TransferOrgResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*TransferOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*TransferOrgRequest) when calling interceptor")
					}
					return s.OrgService.TransferOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*TransferOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*TransferOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *TransferOrgResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TransferOrgResponse and nil error while calling TransferOrg. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orgServiceServer) serveListOrg(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListOrgJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListOrgProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *orgServiceServer) serveListOrgJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListOrg")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListOrgRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.OrgService.ListOrg
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListOrgRequest) (*ListOrgResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListOrgRequest) when calling interceptor")
					}
					return s.OrgService.ListOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListOrgResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListOrgResponse and nil error while calling ListOrg. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orgServiceServer) serveListOrgProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListOrg")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListOrgRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.OrgService.ListOrg
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListOrgRequest) (*ListOrgResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListOrgRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListOrgRequest) when calling interceptor")
					}
					return s.OrgService.ListOrg(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListOrgResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListOrgResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListOrgResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListOrgResponse and nil error while calling ListOrg. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *orgServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor2, 0
}

func (s *orgServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.2"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *orgServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "perm.v1", "OrgService")
}

var twirpFileDescriptor2 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4f, 0x4f, 0xfa, 0x40,
	0x10, 0xe5, 0xcf, 0xef, 0x07, 0xe9, 0x90, 0x08, 0x0c, 0x21, 0x60, 0x35, 0x86, 0x34, 0x31, 0xc1,
	0x4b, 0x09, 0x7a, 0x34, 0xf1, 0x80, 0x5c, 0x34, 0x26, 0x24, 0xa8, 0x17, 0x2f, 0x04, 0xec, 0xb8,
	0x69, 0xa2, 0xdd, 0x3a, 0x5b, 0xca, 0x17, 0xf2, 0x83, 0x9a, 0xfe, 0x61, 0x5d, 0x28, 0x07, 0xe3,
	0x69, 0x77, 0xdf, 0x9b, 0x79, 0xb3, 0xf3, 0x66, 0xa0, 0x1d, 0x12, 0x7f, 0x8c, 0xe2, 0xf1, 0x48,
	0xb2, 0x70, 0x43, 0x96, 0x91, 0xc4, 0x7a, 0x02, 0xb9, 0xf1, 0xd8, 0x69, 0xc1, 0xd1, 0x83, 0xaf,
	0xa2, 0x19, 0x8b, 0x39, 0x7d, 0xae, 0x49, 0x45, 0xce, 0x05, 0xb4, 0xa6, 0xf4, 0x4e, 0x11, 0xfd,
	0x60, 0xd8, 0x85, 0x9a, 0x64, 0xb1, 0xf0, 0xbd, 0x7e, 0x79, 0x50, 0x1e, 0x5a, 0xf3, 0xff, 0x92,
	0xc5, 0x9d, 0xe7, 0x74, 0xa0, 0x6d, 0x84, 0xaa, 0x50, 0x06, 0x8a, 0x9c, 0x09, 0xb4, 0x6e, 0x99,
	0x96, 0xbf, 0xc8, 0xc7, 0x1e, 0xd4, 0xd7, 0x8a, 0x38, 0xc1, 0x2b, 0x29, 0x5e, 0x4b, 0x9e, 0x99,
	0xb0, 0xa1, 0x91, 0x0b, 0x77, 0xa1, 0xf3, 0xc4, 0xcb, 0x40, 0xbd, 0x11, 0x9b, 0xb0, 0x07, 0xb8,
	0x03, 0xff, 0xa9, 0x22, 0x9e, 0x41, 0x23, 0xa0, 0xcd, 0x62, 0x4b, 0x56, 0x53, 0xd2, 0x0a, 0x68,
	0xf3, 0x9c, 0xfd, 0xe8, 0x1c, 0x9a, 0xda, 0xa7, 0xac, 0x30, 0x22, 0xfc, 0x93, 0x2c, 0x54, 0xbf,
	0x3c, 0xa8, 0x0e, 0xad, 0x79, 0x7a, 0xbf, 0xfc, 0xaa, 0x00, 0xcc, 0x58, 0x3c, 0x12, 0xc7, 0xfe,
	0x2b, 0xe1, 0x14, 0x2c, 0xdd, 0x07, 0x1e, 0xbb, 0xb9, 0xe9, 0xee, 0xbe, 0x3f, 0xb6, 0x7d, 0x88,
	0xca, 0xfb, 0x2b, 0x25, 0x2a, 0xda, 0x66, 0x43, 0x65, 0x7f, 0x4a, 0x86, 0x4a, 0x71, 0x2a, 0x25,
	0xbc, 0x87, 0x86, 0xe1, 0x13, 0x9e, 0xe8, 0xe0, 0xa2, 0x7b, 0xf6, 0xe9, 0x61, 0x52, 0x6b, 0xdd,
	0x40, 0x3d, 0x77, 0x03, 0x7b, 0x3a, 0x74, 0x77, 0x8f, 0xec, 0x7e, 0x91, 0xd8, 0xe6, 0x4f, 0xda,
	0x2f, 0x4d, 0x77, 0x94, 0xd0, 0xe1, 0xea, 0x3a, 0x3b, 0x56, 0xb5, 0x74, 0x31, 0xaf, 0xbe, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xc9, 0xd9, 0x0a, 0x2f, 0xad, 0x02, 0x00, 0x00,
}
