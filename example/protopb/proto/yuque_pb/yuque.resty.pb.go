// Code generated by protoc-gen-resty. DO NOT EDIT.
// versions:
// - protoc-gen-resty v0.1.0
// - protoc           v3.17.3
// source: proto/yuque_pb/yuque.proto

package yuque_pb

import (
	context "context"
	v2 "github.com/go-resty/resty/v2"
	go_json "github.com/goccy/go-json"
	lava "github.com/pubgo/lava/proto/lava"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	strings "strings"
)

type YuqueResty interface {
	// 获取认证的用户的个人信息
	UserInfo(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*UserInfoResp, error)
	// 获取单个用户信息
	UserInfoByLogin(ctx context.Context, in *UserInfoReq, opts ...func(req *v2.Request)) (*UserInfoResp, error)
	// 创建 Group
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...func(req *v2.Request)) (*CreateGroupResp, error)
}

func NewYuqueResty(client *v2.Client) YuqueResty {
	client.SetContentLength(true)
	return &yuqueResty{client: client}
}

type yuqueResty struct {
	client *v2.Client
}

func (c *yuqueResty) UserInfo(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*UserInfoResp, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/user")
	if err != nil {
		return nil, err
	}
	out := new(UserInfoResp)

	var headers = make(map[string]string)
	for k, v := range resp.Header() {
		headers[k] = strings.Join(v, ",")
	}
	out.Response = &lava.Response{
		Code:    int32(resp.StatusCode()),
		Headers: headers,
	}
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yuqueResty) UserInfoByLogin(ctx context.Context, in *UserInfoReq, opts ...func(req *v2.Request)) (*UserInfoResp, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/users/{login}")
	if err != nil {
		return nil, err
	}
	out := new(UserInfoResp)

	var headers = make(map[string]string)
	for k, v := range resp.Header() {
		headers[k] = strings.Join(v, ",")
	}
	out.Response = &lava.Response{
		Code:    int32(resp.StatusCode()),
		Headers: headers,
	}
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yuqueResty) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...func(req *v2.Request)) (*CreateGroupResp, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/groups")
	if err != nil {
		return nil, err
	}
	out := new(CreateGroupResp)

	var headers = make(map[string]string)
	for k, v := range resp.Header() {
		headers[k] = strings.Join(v, ",")
	}
	out.Response = &lava.Response{
		Code:    int32(resp.StatusCode()),
		Headers: headers,
	}
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}
