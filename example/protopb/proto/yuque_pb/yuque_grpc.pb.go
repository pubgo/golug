// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package yuque_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// YuqueClient is the client API for Yuque service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YuqueClient interface {
	// 获取认证的用户的个人信息
	UserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserInfoResp, error)
	// 获取单个用户信息
	UserInfoByLogin(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
	// 创建 Group
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error)
}

type yuqueClient struct {
	cc grpc.ClientConnInterface
}

func NewYuqueClient(cc grpc.ClientConnInterface) YuqueClient {
	return &yuqueClient{cc}
}

func (c *yuqueClient) UserInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, "/yuque.v2.Yuque/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yuqueClient) UserInfoByLogin(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	out := new(UserInfoResp)
	err := c.cc.Invoke(ctx, "/yuque.v2.Yuque/UserInfoByLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yuqueClient) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...grpc.CallOption) (*CreateGroupResp, error) {
	out := new(CreateGroupResp)
	err := c.cc.Invoke(ctx, "/yuque.v2.Yuque/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YuqueServer is the server API for Yuque service.
// All implementations should embed UnimplementedYuqueServer
// for forward compatibility
type YuqueServer interface {
	// 获取认证的用户的个人信息
	UserInfo(context.Context, *emptypb.Empty) (*UserInfoResp, error)
	// 获取单个用户信息
	UserInfoByLogin(context.Context, *UserInfoReq) (*UserInfoResp, error)
	// 创建 Group
	CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error)
}

// UnimplementedYuqueServer should be embedded to have forward compatible implementations.
type UnimplementedYuqueServer struct {
}

func (UnimplementedYuqueServer) UserInfo(context.Context, *emptypb.Empty) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfo not implemented")
}
func (UnimplementedYuqueServer) UserInfoByLogin(context.Context, *UserInfoReq) (*UserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInfoByLogin not implemented")
}
func (UnimplementedYuqueServer) CreateGroup(context.Context, *CreateGroupReq) (*CreateGroupResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}

// UnsafeYuqueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YuqueServer will
// result in compilation errors.
type UnsafeYuqueServer interface {
	mustEmbedUnimplementedYuqueServer()
}

func RegisterYuqueServer(s grpc.ServiceRegistrar, srv YuqueServer) {
	s.RegisterService(&_Yuque_serviceDesc, srv)
}

func _Yuque_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YuqueServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuque.v2.Yuque/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YuqueServer).UserInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yuque_UserInfoByLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YuqueServer).UserInfoByLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuque.v2.Yuque/UserInfoByLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YuqueServer).UserInfoByLogin(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Yuque_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YuqueServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuque.v2.Yuque/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YuqueServer).CreateGroup(ctx, req.(*CreateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Yuque_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yuque.v2.Yuque",
	HandlerType: (*YuqueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserInfo",
			Handler:    _Yuque_UserInfo_Handler,
		},
		{
			MethodName: "UserInfoByLogin",
			Handler:    _Yuque_UserInfoByLogin_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Yuque_CreateGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/yuque_pb/yuque.proto",
}
