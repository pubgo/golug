// Code generated by protoc-gen-lava. DO NOT EDIT.
// versions:
// - protoc-gen-lava v0.1.0
// - protoc         v3.17.3
// source: proto/hello/api.proto

package hello

import (
	context "context"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	grpcc "github.com/pubgo/lava/clients/grpcc"
	xgen "github.com/pubgo/lava/xgen"
	grpc "google.golang.org/grpc"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

func GetTestApiClient(srv string, opts ...func(cfg *grpcc.Cfg)) TestApiClient {
	return &testApiClient{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &TestReq{},
		Output:       &TestApiOutput{},
		Service:      "hello.TestApi",
		Name:         "Version",
		Method:       "GET",
		Path:         "/v1/version",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &structpb.Value{},
		Output:       &TestApiOutput1{},
		Service:      "hello.TestApi",
		Name:         "Version1",
		Method:       "POST",
		Path:         "/v1/version1",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &TestReq{},
		Output:       &TestApiOutput{},
		Service:      "hello.TestApi",
		Name:         "VersionTest",
		Method:       "GET",
		Path:         "/v1/example/versiontest",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &TestReq{},
		Output:       &TestApiOutput{},
		Service:      "hello.TestApi",
		Name:         "VersionTestCustom",
		Method:       "GET",
		Path:         "/v1/example/versionTestCustom",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterTestApiServer, mthList)
	var registerTestApiGrpcClient = func(ctx context.Context, mux *runtime.ServeMux, conn grpc.ClientConnInterface) error {
		return RegisterTestApiHandlerClient(ctx, mux, NewTestApiClient(conn))
	}
	xgen.Add(registerTestApiGrpcClient, nil)
}
func GetTestApiV2Client(srv string, opts ...func(cfg *grpcc.Cfg)) TestApiV2Client {
	return &testApiV2Client{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &TestReq{},
		Output:       &TestApiOutput{},
		Service:      "hello.TestApiV2",
		Name:         "Version1",
		Method:       "POST",
		Path:         "/v2/example/version/{name}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &TestReq{},
		Output:       &TestApiOutput{},
		Service:      "hello.TestApiV2",
		Name:         "VersionTest1",
		Method:       "POST",
		Path:         "/v2/example/versiontest",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterTestApiV2Server, mthList)
	var registerTestApiV2GrpcClient = func(ctx context.Context, mux *runtime.ServeMux, conn grpc.ClientConnInterface) error {
		return RegisterTestApiV2HandlerClient(ctx, mux, NewTestApiV2Client(conn))
	}
	xgen.Add(registerTestApiV2GrpcClient, nil)
}
