// Code generated by protoc-gen-resty. DO NOT EDIT.
// versions:
// - protoc-gen-resty v0.1.0
// - protoc           v3.19.4
// source: proto/yuquepb/yuque.proto

package yuquepb

import (
	context "context"
	v2 "github.com/go-resty/resty/v2"
	go_json "github.com/goccy/go-json"
	lava "github.com/pubgo/lava/proto/lava"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	strings "strings"
)

type YuqueResty interface {
	// 获取认证的用户的个人信息
	UserInfo(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*UserInfoResp, error)
	// 获取单个用户信息
	UserInfoByLogin(ctx context.Context, in *UserInfoReq, opts ...func(req *v2.Request)) (*UserInfoResp, error)
	// 创建 Group
	CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...func(req *v2.Request)) (*CreateGroupResp, error)
}

func NewYuqueResty(client *v2.Client) YuqueResty {
	client.SetContentLength(true)
	return &yuqueResty{client: client}
}

type yuqueResty struct {
	client *v2.Client
}

func (c *yuqueResty) UserInfo(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*UserInfoResp, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var resp, err = req.Execute("GET", "/user")
	if err != nil {
		return nil, err
	}
	out := new(UserInfoResp)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}

	var headers = make(map[string]string, len(resp.Header()))
	for k, v := range resp.Header() {
		headers[k] = strings.Join(v, ",")
	}
	out.Response = &lava.Response{
		Code:    int32(resp.StatusCode()),
		Headers: headers,
	}
	return out, nil
}

func (c *yuqueResty) UserInfoByLogin(ctx context.Context, in *UserInfoReq, opts ...func(req *v2.Request)) (*UserInfoResp, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	req.SetPathParam("login", in.Login)
	in.Login = ""
	var resp, err = req.Execute("GET", "/users/{login}")
	if err != nil {
		return nil, err
	}
	out := new(UserInfoResp)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}

	var headers = make(map[string]string, len(resp.Header()))
	for k, v := range resp.Header() {
		headers[k] = strings.Join(v, ",")
	}
	out.Response = &lava.Response{
		Code:    int32(resp.StatusCode()),
		Headers: headers,
	}
	return out, nil
}

func (c *yuqueResty) CreateGroup(ctx context.Context, in *CreateGroupReq, opts ...func(req *v2.Request)) (*CreateGroupResp, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	req.SetBody(in)
	var resp, err = req.Execute("POST", "/groups")
	if err != nil {
		return nil, err
	}
	out := new(CreateGroupResp)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}

	var headers = make(map[string]string, len(resp.Header()))
	for k, v := range resp.Header() {
		headers[k] = strings.Join(v, ",")
	}
	out.Response = &lava.Response{
		Code:    int32(resp.StatusCode()),
		Headers: headers,
	}
	return out, nil
}
