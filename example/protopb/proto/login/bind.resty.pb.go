// Code generated by protoc-gen-resty. DO NOT EDIT.
// versions:
// - protoc-gen-resty v0.1.0
// - protoc           v3.17.3
// source: proto/login/bind.proto

package login

import (
	context "context"
	v2 "github.com/go-resty/resty/v2"
	go_json "github.com/goccy/go-json"
	reflect "reflect"
)

type BindTelephoneResty interface {
	// 检查是否可以绑定
	Check(ctx context.Context, in *CheckRequest, opts ...func(req *v2.Request)) (*CheckResponse, error)
	// 通过验证码,校验手机号是否可以接收验证码
	BindVerify(ctx context.Context, in *BindVerifyRequest, opts ...func(req *v2.Request)) (*BindVerifyResponse, error)
	// 通过验证码,进行手机号绑定,换绑
	BindChange(ctx context.Context, in *BindChangeRequest, opts ...func(req *v2.Request)) (*BindChangeResponse, error)
	// 手机号绑定,不通过验证码
	AutomaticBind(ctx context.Context, in *AutomaticBindRequest, opts ...func(req *v2.Request)) (*AutomaticBindResponse, error)
	// 绑定手机号解析，通过第三方小程序code换取手机号
	BindPhoneParse(ctx context.Context, in *BindPhoneParseRequest, opts ...func(req *v2.Request)) (*BindPhoneParseResponse, error)
	// 绑定手机号解析，通过阿里一键
	BindPhoneParseByOneClick(ctx context.Context, in *BindPhoneParseByOneClickRequest, opts ...func(req *v2.Request)) (*BindPhoneParseByOneClickResponse, error)
}

func NewBindTelephoneResty(client *v2.Client) BindTelephoneResty {
	client.SetContentLength(true)
	return &bindTelephoneResty{client: client}
}

type bindTelephoneResty struct {
	client *v2.Client
}

func (c *bindTelephoneResty) Check(ctx context.Context, in *CheckRequest, opts ...func(req *v2.Request)) (*CheckResponse, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/user/bind-telephone/check")
	if err != nil {
		return nil, err
	}
	out := new(CheckResponse)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindTelephoneResty) BindVerify(ctx context.Context, in *BindVerifyRequest, opts ...func(req *v2.Request)) (*BindVerifyResponse, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/user/bind-telephone/bind-verify")
	if err != nil {
		return nil, err
	}
	out := new(BindVerifyResponse)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindTelephoneResty) BindChange(ctx context.Context, in *BindChangeRequest, opts ...func(req *v2.Request)) (*BindChangeResponse, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/user/bind-telephone/bind-change")
	if err != nil {
		return nil, err
	}
	out := new(BindChangeResponse)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindTelephoneResty) AutomaticBind(ctx context.Context, in *AutomaticBindRequest, opts ...func(req *v2.Request)) (*AutomaticBindResponse, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/user/bind-telephone/automatic-bind")
	if err != nil {
		return nil, err
	}
	out := new(AutomaticBindResponse)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindTelephoneResty) BindPhoneParse(ctx context.Context, in *BindPhoneParseRequest, opts ...func(req *v2.Request)) (*BindPhoneParseResponse, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/user/bind-telephone/bind-phone-parse")
	if err != nil {
		return nil, err
	}
	out := new(BindPhoneParseResponse)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bindTelephoneResty) BindPhoneParseByOneClick(ctx context.Context, in *BindPhoneParseByOneClickRequest, opts ...func(req *v2.Request)) (*BindPhoneParseByOneClickResponse, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/user/bind-telephone/bind-phone-parse-by-one-click")
	if err != nil {
		return nil, err
	}
	out := new(BindPhoneParseByOneClickResponse)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}
