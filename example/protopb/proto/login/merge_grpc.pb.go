// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package login

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MergeClient is the client API for Merge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MergeClient interface {
	// 手机号合并,换绑,手机号更换
	Telephone(ctx context.Context, in *TelephoneRequest, opts ...grpc.CallOption) (*Reply, error)
	// 手机号账户合并检查
	TelephoneCheck(ctx context.Context, in *TelephoneRequest, opts ...grpc.CallOption) (*Reply, error)
	// 微信账户绑定
	WeChat(ctx context.Context, in *WeChatRequest, opts ...grpc.CallOption) (*Reply, error)
	// 微信合并检查
	WeChatCheck(ctx context.Context, in *WeChatRequest, opts ...grpc.CallOption) (*Reply, error)
	// 解除微信绑定, 必须拥有手机号
	WeChatUnMerge(ctx context.Context, in *WeChatUnMergeRequest, opts ...grpc.CallOption) (*Reply, error)
}

type mergeClient struct {
	cc grpc.ClientConnInterface
}

func NewMergeClient(cc grpc.ClientConnInterface) MergeClient {
	return &mergeClient{cc}
}

func (c *mergeClient) Telephone(ctx context.Context, in *TelephoneRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/login.Merge/Telephone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergeClient) TelephoneCheck(ctx context.Context, in *TelephoneRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/login.Merge/TelephoneCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergeClient) WeChat(ctx context.Context, in *WeChatRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/login.Merge/WeChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergeClient) WeChatCheck(ctx context.Context, in *WeChatRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/login.Merge/WeChatCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergeClient) WeChatUnMerge(ctx context.Context, in *WeChatUnMergeRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/login.Merge/WeChatUnMerge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MergeServer is the server API for Merge service.
// All implementations should embed UnimplementedMergeServer
// for forward compatibility
type MergeServer interface {
	// 手机号合并,换绑,手机号更换
	Telephone(context.Context, *TelephoneRequest) (*Reply, error)
	// 手机号账户合并检查
	TelephoneCheck(context.Context, *TelephoneRequest) (*Reply, error)
	// 微信账户绑定
	WeChat(context.Context, *WeChatRequest) (*Reply, error)
	// 微信合并检查
	WeChatCheck(context.Context, *WeChatRequest) (*Reply, error)
	// 解除微信绑定, 必须拥有手机号
	WeChatUnMerge(context.Context, *WeChatUnMergeRequest) (*Reply, error)
}

// UnimplementedMergeServer should be embedded to have forward compatible implementations.
type UnimplementedMergeServer struct {
}

func (UnimplementedMergeServer) Telephone(context.Context, *TelephoneRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Telephone not implemented")
}
func (UnimplementedMergeServer) TelephoneCheck(context.Context, *TelephoneRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TelephoneCheck not implemented")
}
func (UnimplementedMergeServer) WeChat(context.Context, *WeChatRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeChat not implemented")
}
func (UnimplementedMergeServer) WeChatCheck(context.Context, *WeChatRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeChatCheck not implemented")
}
func (UnimplementedMergeServer) WeChatUnMerge(context.Context, *WeChatUnMergeRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeChatUnMerge not implemented")
}

// UnsafeMergeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MergeServer will
// result in compilation errors.
type UnsafeMergeServer interface {
	mustEmbedUnimplementedMergeServer()
}

func RegisterMergeServer(s grpc.ServiceRegistrar, srv MergeServer) {
	s.RegisterService(&_Merge_serviceDesc, srv)
}

func _Merge_Telephone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelephoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergeServer).Telephone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.Merge/Telephone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergeServer).Telephone(ctx, req.(*TelephoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merge_TelephoneCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelephoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergeServer).TelephoneCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.Merge/TelephoneCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergeServer).TelephoneCheck(ctx, req.(*TelephoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merge_WeChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergeServer).WeChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.Merge/WeChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergeServer).WeChat(ctx, req.(*WeChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merge_WeChatCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergeServer).WeChatCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.Merge/WeChatCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergeServer).WeChatCheck(ctx, req.(*WeChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merge_WeChatUnMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeChatUnMergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MergeServer).WeChatUnMerge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.Merge/WeChatUnMerge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MergeServer).WeChatUnMerge(ctx, req.(*WeChatUnMergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Merge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "login.Merge",
	HandlerType: (*MergeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Telephone",
			Handler:    _Merge_Telephone_Handler,
		},
		{
			MethodName: "TelephoneCheck",
			Handler:    _Merge_TelephoneCheck_Handler,
		},
		{
			MethodName: "WeChat",
			Handler:    _Merge_WeChat_Handler,
		},
		{
			MethodName: "WeChatCheck",
			Handler:    _Merge_WeChatCheck_Handler,
		},
		{
			MethodName: "WeChatUnMerge",
			Handler:    _Merge_WeChatUnMerge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/login/merge.proto",
}
