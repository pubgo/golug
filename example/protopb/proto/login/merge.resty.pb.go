// Code generated by protoc-gen-resty. DO NOT EDIT.
// versions:
// - protoc-gen-resty v0.1.0
// - protoc           v3.19.4
// source: proto/login/merge.proto

package login

import (
	context "context"
	v2 "github.com/go-resty/resty/v2"
	go_json "github.com/goccy/go-json"
	reflect "reflect"
)

type MergeResty interface {
	// 手机号合并,换绑,手机号更换
	Telephone(ctx context.Context, in *TelephoneRequest, opts ...func(req *v2.Request)) (*Reply, error)
	// 手机号账户合并检查
	TelephoneCheck(ctx context.Context, in *TelephoneRequest, opts ...func(req *v2.Request)) (*Reply, error)
	// 微信账户绑定
	WeChat(ctx context.Context, in *WeChatRequest, opts ...func(req *v2.Request)) (*Reply, error)
	// 微信合并检查
	WeChatCheck(ctx context.Context, in *WeChatRequest, opts ...func(req *v2.Request)) (*Reply, error)
	// 解除微信绑定, 必须拥有手机号
	WeChatUnMerge(ctx context.Context, in *WeChatUnMergeRequest, opts ...func(req *v2.Request)) (*Reply, error)
}

func NewMergeResty(client *v2.Client) MergeResty {
	client.SetContentLength(true)
	return &mergeResty{client: client}
}

type mergeResty struct {
	client *v2.Client
}

func (c *mergeResty) Telephone(ctx context.Context, in *TelephoneRequest, opts ...func(req *v2.Request)) (*Reply, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/user/merge/telephone")
	if err != nil {
		return nil, err
	}
	out := new(Reply)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergeResty) TelephoneCheck(ctx context.Context, in *TelephoneRequest, opts ...func(req *v2.Request)) (*Reply, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/user/merge/telephone-check")
	if err != nil {
		return nil, err
	}
	out := new(Reply)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergeResty) WeChat(ctx context.Context, in *WeChatRequest, opts ...func(req *v2.Request)) (*Reply, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/user/merge/we-chat")
	if err != nil {
		return nil, err
	}
	out := new(Reply)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergeResty) WeChatCheck(ctx context.Context, in *WeChatRequest, opts ...func(req *v2.Request)) (*Reply, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/user/merge/we-chat-check")
	if err != nil {
		return nil, err
	}
	out := new(Reply)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mergeResty) WeChatUnMerge(ctx context.Context, in *WeChatUnMergeRequest, opts ...func(req *v2.Request)) (*Reply, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/user/merge/we-chat-un-merge")
	if err != nil {
		return nil, err
	}
	out := new(Reply)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}
