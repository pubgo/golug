// Code generated by protoc-gen-resty. DO NOT EDIT.
// versions:
// - protoc-gen-resty v0.1.0
// - protoc           v3.17.3
// source: proto/login/login.proto

package login

import (
	context "context"
	fmt "fmt"
	v2 "github.com/go-resty/resty/v2"
	go_json "github.com/goccy/go-json"
	http "net/http"
	reflect "reflect"
	strings "strings"
)

type LoginResty interface {
	// 登录注册获取凭证,cookie,token
	Login(ctx context.Context, in *LoginRequest, opts ...func(req *v2.Request)) (*LoginResponse, error)
	// 使用凭证获取用户信息
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...func(req *v2.Request)) (*AuthenticateResponse, error)
}

func NewLoginResty(client *v2.Client) LoginResty {
	return &loginResty{client: client}
}

type loginResty struct {
	client *v2.Client
}

func (c *loginResty) Login(ctx context.Context, in *LoginRequest, opts ...func(req *v2.Request)) (*LoginResponse, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var rv = reflect.ValueOf(in)
	var rt = reflect.TypeOf(in)
	for i := rt.NumField(); i > 0; i-- {
		if path := rt.Field(i).Tag.Get("path"); path != "" {
			req.SetPathParam(path, rv.Field(i).String())
		}
		if uri := rt.Field(i).Tag.Get("uri"); uri != "" {
			req.SetQueryParam(uri, rv.Field(i).String())
		}
	}
	req.SetBody(in)
	var resp, err = req.Execute("POST", "/user/login/login")
	if err != nil {
		return nil, err
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, fmt.Errorf("code error: %d", resp.StatusCode())
	}
	out := new(LoginResponse)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginResty) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...func(req *v2.Request)) (*AuthenticateResponse, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var rv = reflect.ValueOf(in)
	var rt = reflect.TypeOf(in)
	for i := rt.NumField(); i > 0; i-- {
		if path := rt.Field(i).Tag.Get("path"); path != "" {
			req.SetPathParam(path, rv.Field(i).String())
		}
		if uri := rt.Field(i).Tag.Get("uri"); uri != "" {
			req.SetQueryParam(uri, rv.Field(i).String())
		}
	}
	req.SetBody(in)
	var resp, err = req.Execute("POST", "/user/login/authenticate")
	if err != nil {
		return nil, err
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, fmt.Errorf("code error: %d", resp.StatusCode())
	}
	out := new(AuthenticateResponse)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}
