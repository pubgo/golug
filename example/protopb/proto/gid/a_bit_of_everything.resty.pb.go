// Code generated by protoc-gen-resty. DO NOT EDIT.
// versions:
// - protoc-gen-resty v0.1.0
// - protoc           v3.17.3
// source: proto/gid/a_bit_of_everything.proto

package gid

import (
	context "context"
	fmt "fmt"
	v2 "github.com/go-resty/resty/v2"
	go_json "github.com/goccy/go-json"
	http "net/http"
	reflect "reflect"
	strings "strings"
)

type LoginServiceResty interface {
	// Login
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// ## {{.RequestType.Name}}
	// | Field ID    | Name      | Type                                                       | Description                  |
	// | ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}
	// | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// ## {{.ResponseType.Name}}
	// | Field ID    | Name      | Type                                                       | Description                  |
	// | ----------- | --------- | ---------------------------------------------------------- | ---------------------------- | {{range .ResponseType.Fields}}
	// | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	Login(ctx context.Context, in *LoginRequest, opts ...func(req *v2.Request)) (*LoginReply, error)
	// Logout
	//
	// {{.MethodDescriptorProto.Name}} is a call with the method(s) {{$first := true}}{{range .Bindings}}{{if $first}}{{$first = false}}{{else}}, {{end}}{{.HTTPMethod}}{{end}} within the "{{.Service.Name}}" service.
	// It takes in "{{.RequestType.Name}}" and returns a "{{.ResponseType.Name}}".
	//
	// ## {{.RequestType.Name}}
	// | Field ID    | Name      | Type                                                       | Description                  |
	// | ----------- | --------- | ---------------------------------------------------------  | ---------------------------- | {{range .RequestType.Fields}}
	// | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	//
	// ## {{.ResponseType.Name}}
	// | Field ID    | Name      | Type                                                       | Description                  |
	// | ----------- | --------- | ---------------------------------------------------------- | ---------------------------- | {{range .ResponseType.Fields}}
	// | {{.Number}} | {{.Name}} | {{if eq .Label.String "LABEL_REPEATED"}}[]{{end}}{{.Type}} | {{fieldcomments .Message .}} | {{end}}
	Logout(ctx context.Context, in *LogoutRequest, opts ...func(req *v2.Request)) (*LogoutReply, error)
}

func NewLoginServiceResty(client *v2.Client) LoginServiceResty {
	return &loginServiceResty{client: client}
}

type loginServiceResty struct {
	client *v2.Client
}

func (c *loginServiceResty) Login(ctx context.Context, in *LoginRequest, opts ...func(req *v2.Request)) (*LoginReply, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var rv = reflect.ValueOf(in)
	var rt = reflect.TypeOf(in)
	for i := rt.NumField(); i > 0; i-- {
		if path := rt.Field(i).Tag.Get("path"); path != "" {
			req.SetPathParam(path, rv.Field(i).String())
		}
		if uri := rt.Field(i).Tag.Get("uri"); uri != "" {
			req.SetQueryParam(uri, rv.Field(i).String())
		}
	}
	req.SetBody(in)
	var resp, err = req.Execute("POST", "/v1/example/login")
	if err != nil {
		return nil, err
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, fmt.Errorf("code error: %d", resp.StatusCode())
	}
	out := new(LoginReply)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceResty) Logout(ctx context.Context, in *LogoutRequest, opts ...func(req *v2.Request)) (*LogoutReply, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var rv = reflect.ValueOf(in)
	var rt = reflect.TypeOf(in)
	for i := rt.NumField(); i > 0; i-- {
		if path := rt.Field(i).Tag.Get("path"); path != "" {
			req.SetPathParam(path, rv.Field(i).String())
		}
		if uri := rt.Field(i).Tag.Get("uri"); uri != "" {
			req.SetQueryParam(uri, rv.Field(i).String())
		}
	}
	req.SetBody(in)
	var resp, err = req.Execute("POST", "/v1/example/logout")
	if err != nil {
		return nil, err
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, fmt.Errorf("code error: %d", resp.StatusCode())
	}
	out := new(LogoutReply)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}
