// Code generated by protoc-gen-lava. DO NOT EDIT.
// versions:
// - protoc-gen-lava v0.1.0
// - protoc         v3.17.3
// source: proto/gid/a_bit_of_everything.proto

package gid

import (
	gin "github.com/gin-gonic/gin"
	grpcc "github.com/pubgo/lava/clients/grpcc"
	xgen "github.com/pubgo/lava/xgen"
	xerror "github.com/pubgo/xerror"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

func GetLoginServiceClient(srv string, opts ...func(cfg *grpcc.Cfg)) LoginServiceClient {
	return &loginServiceClient{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &LoginRequest{},
		Output:       &LoginReply{},
		Service:      "gid.LoginService",
		Name:         "Login",
		Method:       "POST",
		Path:         "/v1/example/login",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &LogoutRequest{},
		Output:       &LogoutReply{},
		Service:      "gid.LoginService",
		Name:         "Logout",
		Method:       "POST",
		Path:         "/v1/example/logout",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterLoginServiceServer, mthList)
	xgen.Add(RegisterLoginServiceHandler, nil)
	xgen.Add(RegisterLoginServiceGinServer, nil)
}
func RegisterLoginServiceGinServer(r gin.IRouter, server LoginServiceServer) {
	xerror.Assert(r == nil || server == nil, "router or server is nil")
	r.Handle("POST", "/v1/example/login", func(ctx *gin.Context) {
		var req = new(LoginRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Login(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/v1/example/logout", func(ctx *gin.Context) {
		var req = new(LogoutRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Logout(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
}
