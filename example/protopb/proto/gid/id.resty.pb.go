// Code generated by protoc-gen-resty. DO NOT EDIT.
// versions:
// - protoc-gen-resty v0.1.0
// - protoc           v3.17.3
// source: proto/gid/id.proto

package gid

import (
	context "context"
	v2 "github.com/go-resty/resty/v2"
	go_json "github.com/goccy/go-json"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
)

type IdResty interface {
	// Generate 生成ID
	Generate(ctx context.Context, in *GenerateRequest, opts ...func(req *v2.Request)) (*GenerateResponse, error)
	// Types id类型
	Types(ctx context.Context, in *TypesRequest, opts ...func(req *v2.Request)) (*TypesResponse, error)
}

func NewIdResty(client *v2.Client) IdResty {
	client.SetContentLength(true)
	return &idResty{client: client}
}

type idResty struct {
	client *v2.Client
}

func (c *idResty) Generate(ctx context.Context, in *GenerateRequest, opts ...func(req *v2.Request)) (*GenerateResponse, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/v1/id/generate")
	if err != nil {
		return nil, err
	}
	out := new(GenerateResponse)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idResty) Types(ctx context.Context, in *TypesRequest, opts ...func(req *v2.Request)) (*TypesResponse, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/v1/id/types")
	if err != nil {
		return nil, err
	}
	out := new(TypesResponse)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

type ABitOfEverythingServiceResty interface {
	// Create a new ABitOfEverything
	//
	// This API creates a new ABitOfEverything
	Create(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*ABitOfEverything, error)
	CreateBody(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*ABitOfEverything, error)
	// Create a book.
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...func(req *v2.Request)) (*Book, error)
	UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...func(req *v2.Request)) (*Book, error)
	Update(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*emptypb.Empty, error)
	UpdateV2(ctx context.Context, in *UpdateV2Request, opts ...func(req *v2.Request)) (*emptypb.Empty, error)
	//  rpc Delete(grpc.gateway.examples.internal.proto.sub2.IdMessage) returns (google.protobuf.Empty) {
	//    option (google.api.http) = {
	//      delete: "/v1/example/a_bit_of_everything/{uuid}"
	//    };
	//    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	//      security: {
	//        security_requirement: {
	//          key: "ApiKeyAuth";
	//          value: {}
	//        }
	//        security_requirement: {
	//          key: "OAuth2";
	//          value: {
	//            scope: "read";
	//            scope: "write";
	//          }
	//        }
	//      }
	//      extensions: {
	//        key: "x-irreversible";
	//        value {
	//          bool_value: true;
	//        }
	//      }
	//    };
	//  }
	GetQuery(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*emptypb.Empty, error)
	GetRepeatedQuery(ctx context.Context, in *ABitOfEverythingRepeated, opts ...func(req *v2.Request)) (*ABitOfEverythingRepeated, error)
	// Echo allows posting a StringMessage value.
	//
	// It also exposes multiple bindings.
	//
	// This makes it useful when validating that the OpenAPI v2 API
	// description exposes documentation correctly on all paths
	// defined as additional_bindings in the proto.
	//  rpc Echo(grpc.gateway.examples.internal.proto.sub.StringMessage) returns (grpc.gateway.examples.internal.proto.sub.StringMessage) {
	//    option (google.api.http) = {
	//      get: "/v1/example/a_bit_of_everything/echo/{value}"
	//      additional_bindings {
	//        post: "/v2/example/echo"
	//        body: "value"
	//      }
	//      additional_bindings {
	//        get: "/v2/example/echo"
	//      }
	//    };
	//    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
	//      description: "Description Echo";
	//      summary: "Summary: Echo rpc";
	//      tags: "echo rpc";
	//      external_docs: {
	//        url: "https://github.com/grpc-ecosystem/grpc-gateway";
	//        description: "Find out more Echo";
	//      }
	//      responses: {
	//        key: "200"
	//        value: {
	//          examples: {
	//            key: "application/json"
	//            value: '{"value": "the input value"}'
	//          }
	//        }
	//      }
	//      responses: {
	//        key: "503";
	//        value: {
	//          description: "Returned when the resource is temporarily unavailable.";
	//          extensions: {
	//            key: "x-number";
	//            value {
	//              number_value: 100;
	//            }
	//          }
	//        }
	//      }
	//      responses: {
	//        // Overwrites global definition.
	//        key: "404";
	//        value: {
	//          description: "Returned when the resource does not exist.";
	//          schema: {
	//            json_schema: {
	//              type: INTEGER;
	//            }
	//          }
	//        }
	//      }
	//    };
	//  }
	DeepPathEcho(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*ABitOfEverything, error)
	NoBindings(ctx context.Context, in *durationpb.Duration, opts ...func(req *v2.Request)) (*emptypb.Empty, error)
	Timeout(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*emptypb.Empty, error)
	ErrorWithDetails(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*emptypb.Empty, error)
	GetMessageWithBody(ctx context.Context, in *MessageWithBody, opts ...func(req *v2.Request)) (*emptypb.Empty, error)
	PostWithEmptyBody(ctx context.Context, in *Body, opts ...func(req *v2.Request)) (*emptypb.Empty, error)
	CheckGetQueryParams(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*ABitOfEverything, error)
	CheckNestedEnumGetQueryParams(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*ABitOfEverything, error)
	CheckPostQueryParams(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*ABitOfEverything, error)
	OverwriteResponseContentType(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*wrapperspb.StringValue, error)
	CheckStatus(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*CheckStatusResponse, error)
}

func NewABitOfEverythingServiceResty(client *v2.Client) ABitOfEverythingServiceResty {
	client.SetContentLength(true)
	return &aBitOfEverythingServiceResty{client: client}
}

type aBitOfEverythingServiceResty struct {
	client *v2.Client
}

func (c *aBitOfEverythingServiceResty) Create(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*ABitOfEverything, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/v1/example/a_bit_of_everything/{float_value}/{double_value}/{int64_value}/separator/{uint64_value}/{int32_value}/{fixed64_value}/{fixed32_value}/{bool_value}/{string_value=strprefix/*}/{uint32_value}/{sfixed32_value}/{sfixed64_value}/{sint32_value}/{sint64_value}/{nonConventionalNameValue}/{enum_value}")
	if err != nil {
		return nil, err
	}
	out := new(ABitOfEverything)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) CreateBody(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*ABitOfEverything, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/v1/example/a_bit_of_everything")
	if err != nil {
		return nil, err
	}
	out := new(ABitOfEverything)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...func(req *v2.Request)) (*Book, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/v1/{parent=publishers/*}/books")
	if err != nil {
		return nil, err
	}
	out := new(Book)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) UpdateBook(ctx context.Context, in *UpdateBookRequest, opts ...func(req *v2.Request)) (*Book, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("PATCH", "/v1/{book.name=publishers/*/books/*}")
	if err != nil {
		return nil, err
	}
	out := new(Book)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) Update(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*emptypb.Empty, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("PUT", "/v1/example/a_bit_of_everything/{uuid}")
	if err != nil {
		return nil, err
	}
	out := new(emptypb.Empty)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) UpdateV2(ctx context.Context, in *UpdateV2Request, opts ...func(req *v2.Request)) (*emptypb.Empty, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("PUT", "/v2/example/a_bit_of_everything/{abe.uuid}")
	if err != nil {
		return nil, err
	}
	out := new(emptypb.Empty)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) GetQuery(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*emptypb.Empty, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/v1/example/a_bit_of_everything/query/{uuid}")
	if err != nil {
		return nil, err
	}
	out := new(emptypb.Empty)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) GetRepeatedQuery(ctx context.Context, in *ABitOfEverythingRepeated, opts ...func(req *v2.Request)) (*ABitOfEverythingRepeated, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/v1/example/a_bit_of_everything_repeated/{path_repeated_float_value}/{path_repeated_double_value}/{path_repeated_int64_value}/{path_repeated_uint64_value}/{path_repeated_int32_value}/{path_repeated_fixed64_value}/{path_repeated_fixed32_value}/{path_repeated_bool_value}/{path_repeated_string_value}/{path_repeated_bytes_value}/{path_repeated_uint32_value}/{path_repeated_enum_value}/{path_repeated_sfixed32_value}/{path_repeated_sfixed64_value}/{path_repeated_sint32_value}/{path_repeated_sint64_value}")
	if err != nil {
		return nil, err
	}
	out := new(ABitOfEverythingRepeated)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) DeepPathEcho(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*ABitOfEverything, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/v1/example/deep_path/{single_nested.name}")
	if err != nil {
		return nil, err
	}
	out := new(ABitOfEverything)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) NoBindings(ctx context.Context, in *durationpb.Duration, opts ...func(req *v2.Request)) (*emptypb.Empty, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/v2/example/NoBindings")
	if err != nil {
		return nil, err
	}
	out := new(emptypb.Empty)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) Timeout(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*emptypb.Empty, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/v2/example/timeout")
	if err != nil {
		return nil, err
	}
	out := new(emptypb.Empty)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) ErrorWithDetails(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*emptypb.Empty, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/v2/example/errorwithdetails")
	if err != nil {
		return nil, err
	}
	out := new(emptypb.Empty)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) GetMessageWithBody(ctx context.Context, in *MessageWithBody, opts ...func(req *v2.Request)) (*emptypb.Empty, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/v2/example/withbody/{id}")
	if err != nil {
		return nil, err
	}
	out := new(emptypb.Empty)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) PostWithEmptyBody(ctx context.Context, in *Body, opts ...func(req *v2.Request)) (*emptypb.Empty, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/v2/example/postwithemptybody/{name}")
	if err != nil {
		return nil, err
	}
	out := new(emptypb.Empty)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) CheckGetQueryParams(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*ABitOfEverything, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/v1/example/a_bit_of_everything/params/get/{single_nested.name}")
	if err != nil {
		return nil, err
	}
	out := new(ABitOfEverything)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) CheckNestedEnumGetQueryParams(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*ABitOfEverything, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/v1/example/a_bit_of_everything/params/get/nested_enum/{single_nested.ok}")
	if err != nil {
		return nil, err
	}
	out := new(ABitOfEverything)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) CheckPostQueryParams(ctx context.Context, in *ABitOfEverything, opts ...func(req *v2.Request)) (*ABitOfEverything, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	var body map[string]interface{}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if body == nil {
				body = make(map[string]interface{})
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				body[val] = rv.Field(i).String()
			}
		}
	}
	req.SetBody(body)
	var resp, err = req.Execute("POST", "/v1/example/a_bit_of_everything/params/post/{string_value}")
	if err != nil {
		return nil, err
	}
	out := new(ABitOfEverything)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) OverwriteResponseContentType(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*wrapperspb.StringValue, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/v2/example/overwriteresponsecontenttype")
	if err != nil {
		return nil, err
	}
	out := new(wrapperspb.StringValue)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBitOfEverythingServiceResty) CheckStatus(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*CheckStatusResponse, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/v1/example/checkStatus")
	if err != nil {
		return nil, err
	}
	out := new(CheckStatusResponse)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

type CamelCaseServiceNameResty interface {
	Empty(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*emptypb.Empty, error)
}

func NewCamelCaseServiceNameResty(client *v2.Client) CamelCaseServiceNameResty {
	client.SetContentLength(true)
	return &camelCaseServiceNameResty{client: client}
}

type camelCaseServiceNameResty struct {
	client *v2.Client
}

func (c *camelCaseServiceNameResty) Empty(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*emptypb.Empty, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/v2/example/empty")
	if err != nil {
		return nil, err
	}
	out := new(emptypb.Empty)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}

type AnotherServiceWithNoBindingsResty interface {
	NoBindings(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*emptypb.Empty, error)
}

func NewAnotherServiceWithNoBindingsResty(client *v2.Client) AnotherServiceWithNoBindingsResty {
	client.SetContentLength(true)
	return &anotherServiceWithNoBindingsResty{client: client}
}

type anotherServiceWithNoBindingsResty struct {
	client *v2.Client
}

func (c *anotherServiceWithNoBindingsResty) NoBindings(ctx context.Context, in *emptypb.Empty, opts ...func(req *v2.Request)) (*emptypb.Empty, error) {
	var req = c.client.R()
	if ctx != nil {
		req.SetContext(ctx)
	}
	for i := range opts {
		opts[i](req)
	}
	if in != nil {
		var rv = reflect.ValueOf(in).Elem()
		var rt = reflect.TypeOf(in).Elem()
		for i := 0; i < rt.NumField(); i++ {
			if val, ok := rt.Field(i).Tag.Lookup("param"); ok && val != "" {
				req.SetPathParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("query"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
				continue
			}
			if val, ok := rt.Field(i).Tag.Lookup("json"); ok && val != "" {
				req.SetQueryParam(val, rv.Field(i).String())
			}
		}
	}
	var resp, err = req.Execute("GET", "/v2/another/no-bindings")
	if err != nil {
		return nil, err
	}
	out := new(emptypb.Empty)
	if err := go_json.Unmarshal(resp.Body(), out); err != nil {
		return nil, err
	}
	return out, nil
}
