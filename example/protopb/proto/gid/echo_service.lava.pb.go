// Code generated by protoc-gen-lava. DO NOT EDIT.
// versions:
// - protoc-gen-lava v0.1.0
// - protoc         v3.17.3
// source: proto/gid/echo_service.proto

package gid

import (
	gin "github.com/gin-gonic/gin"
	grpcc "github.com/pubgo/lava/clients/grpcc"
	binding "github.com/pubgo/lava/pkg/binding"
	xgen "github.com/pubgo/lava/xgen"
	xerror "github.com/pubgo/xerror"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

func GetEchoServiceClient(srv string, opts ...func(cfg *grpcc.Cfg)) EchoServiceClient {
	return &echoServiceClient{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &SimpleMessage{},
		Output:       &SimpleMessage{},
		Service:      "gid.EchoService",
		Name:         "Echo",
		Method:       "POST",
		Path:         "/v1/example/echo/{id}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &SimpleMessage{},
		Output:       &SimpleMessage{},
		Service:      "gid.EchoService",
		Name:         "EchoBody",
		Method:       "POST",
		Path:         "/v1/example/echo_body",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &SimpleMessage{},
		Output:       &SimpleMessage{},
		Service:      "gid.EchoService",
		Name:         "EchoDelete",
		Method:       "DELETE",
		Path:         "/v1/example/echo_delete",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &DynamicMessageUpdate{},
		Output:       &DynamicMessageUpdate{},
		Service:      "gid.EchoService",
		Name:         "EchoPatch",
		Method:       "PATCH",
		Path:         "/v1/example/echo_patch",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &SimpleMessage{},
		Output:       &SimpleMessage{},
		Service:      "gid.EchoService",
		Name:         "EchoUnauthorized",
		Method:       "GET",
		Path:         "/v1/example/echo_unauthorized",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterEchoServiceServer, mthList)
	xgen.Add(RegisterEchoServiceHandler, nil)
	xgen.Add(RegisterEchoServiceGinServer, nil)
}
func RegisterEchoServiceGinServer(r gin.IRouter, server EchoServiceServer) {
	xerror.Assert(r == nil || server == nil, "router or server is nil")
	r.Handle("POST", "/v1/example/echo/{id}", func(ctx *gin.Context) {
		var req = new(SimpleMessage)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Echo(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/v1/example/echo_body", func(ctx *gin.Context) {
		var req = new(SimpleMessage)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.EchoBody(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("DELETE", "/v1/example/echo_delete", func(ctx *gin.Context) {
		var req = new(SimpleMessage)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.EchoDelete(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("PATCH", "/v1/example/echo_patch", func(ctx *gin.Context) {
		var req = new(DynamicMessageUpdate)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.EchoPatch(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("GET", "/v1/example/echo_unauthorized", func(ctx *gin.Context) {
		var req = new(SimpleMessage)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.EchoUnauthorized(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
}
