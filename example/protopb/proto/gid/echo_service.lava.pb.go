// Code generated by protoc-gen-lava. DO NOT EDIT.
// versions:
// - protoc-gen-lava v0.1.0
// - protoc         v3.17.3
// source: proto/gid/echo_service.proto

package gid

import (
	context "context"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	grpcc "github.com/pubgo/lava/clients/grpcc"
	xgen "github.com/pubgo/lava/xgen"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

func GetEchoServiceClient(srv string, opts ...func(cfg *grpcc.Cfg)) EchoServiceClient {
	return &echoServiceClient{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &SimpleMessage{},
		Output:       &SimpleMessage{},
		Service:      "gid.EchoService",
		Name:         "Echo",
		Method:       "POST",
		Path:         "/v1/example/echo/{id}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &SimpleMessage{},
		Output:       &SimpleMessage{},
		Service:      "gid.EchoService",
		Name:         "EchoBody",
		Method:       "POST",
		Path:         "/v1/example/echo_body",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &SimpleMessage{},
		Output:       &SimpleMessage{},
		Service:      "gid.EchoService",
		Name:         "EchoDelete",
		Method:       "DELETE",
		Path:         "/v1/example/echo_delete",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &DynamicMessageUpdate{},
		Output:       &DynamicMessageUpdate{},
		Service:      "gid.EchoService",
		Name:         "EchoPatch",
		Method:       "PATCH",
		Path:         "/v1/example/echo_patch",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &SimpleMessage{},
		Output:       &SimpleMessage{},
		Service:      "gid.EchoService",
		Name:         "EchoUnauthorized",
		Method:       "GET",
		Path:         "/v1/example/echo_unauthorized",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterEchoServiceServer, mthList)
	var registerEchoServiceGrpcClient = func(ctx context.Context, mux *runtime.ServeMux, conn grpc.ClientConnInterface) error {
		return RegisterEchoServiceHandlerClient(ctx, mux, NewEchoServiceClient(conn))
	}
	xgen.Add(registerEchoServiceGrpcClient, nil)
}
