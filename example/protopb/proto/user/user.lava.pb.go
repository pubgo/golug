// Code generated by protoc-gen-lava. DO NOT EDIT.
// versions:
// - protoc-gen-lava v0.1.0
// - protoc         v3.19.4
// source: proto/user/user.proto

package gid

import (
	context "context"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	grpcc_builder "github.com/pubgo/lava/clients/grpcc/grpcc_builder"
	module "github.com/pubgo/lava/module"
	service "github.com/pubgo/lava/service"
	fx "go.uber.org/fx"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

func InitUserClient(addr string, alias ...string) {

	var name = ""
	if len(alias) > 0 {
		name = alias[0]
	}
	conn := grpcc_builder.NewClient(addr)

	module.Register(fx.Provide(fx.Annotated{
		Target: func() UserClient { return NewUserClient(conn) },
		Name:   name,
	}))
}

func RegisterUser(srv service.Service, impl UserServer) {
	var desc service.Desc
	desc.Handler = impl
	desc.ServiceDesc = User_ServiceDesc
	desc.GrpcClientFn = NewUserClient

	desc.GrpcGatewayFn = func(mux *runtime.ServeMux) error {
		return RegisterUserHandlerServer(context.Background(), mux, impl)
	}

	srv.RegisterService(desc)
}

func InitABitOfEverythingServiceClient(addr string, alias ...string) {

	var name = ""
	if len(alias) > 0 {
		name = alias[0]
	}
	conn := grpcc_builder.NewClient(addr)

	module.Register(fx.Provide(fx.Annotated{
		Target: func() ABitOfEverythingServiceClient { return NewABitOfEverythingServiceClient(conn) },
		Name:   name,
	}))
}

func RegisterABitOfEverythingService(srv service.Service, impl ABitOfEverythingServiceServer) {
	var desc service.Desc
	desc.Handler = impl
	desc.ServiceDesc = ABitOfEverythingService_ServiceDesc
	desc.GrpcClientFn = NewABitOfEverythingServiceClient

	desc.GrpcGatewayFn = func(mux *runtime.ServeMux) error {
		return RegisterABitOfEverythingServiceHandlerServer(context.Background(), mux, impl)
	}

	srv.RegisterService(desc)
}

func InitCamelCaseServiceNameClient(addr string, alias ...string) {

	var name = ""
	if len(alias) > 0 {
		name = alias[0]
	}
	conn := grpcc_builder.NewClient(addr)

	module.Register(fx.Provide(fx.Annotated{
		Target: func() CamelCaseServiceNameClient { return NewCamelCaseServiceNameClient(conn) },
		Name:   name,
	}))
}

func RegisterCamelCaseServiceName(srv service.Service, impl CamelCaseServiceNameServer) {
	var desc service.Desc
	desc.Handler = impl
	desc.ServiceDesc = CamelCaseServiceName_ServiceDesc
	desc.GrpcClientFn = NewCamelCaseServiceNameClient

	desc.GrpcGatewayFn = func(mux *runtime.ServeMux) error {
		return RegisterCamelCaseServiceNameHandlerServer(context.Background(), mux, impl)
	}

	srv.RegisterService(desc)
}

func InitAnotherServiceWithNoBindingsClient(addr string, alias ...string) {

	var name = ""
	if len(alias) > 0 {
		name = alias[0]
	}
	conn := grpcc_builder.NewClient(addr)

	module.Register(fx.Provide(fx.Annotated{
		Target: func() AnotherServiceWithNoBindingsClient { return NewAnotherServiceWithNoBindingsClient(conn) },
		Name:   name,
	}))
}

func RegisterAnotherServiceWithNoBindings(srv service.Service, impl AnotherServiceWithNoBindingsServer) {
	var desc service.Desc
	desc.Handler = impl
	desc.ServiceDesc = AnotherServiceWithNoBindings_ServiceDesc
	desc.GrpcClientFn = NewAnotherServiceWithNoBindingsClient

	desc.GrpcGatewayFn = func(mux *runtime.ServeMux) error {
		return RegisterAnotherServiceWithNoBindingsHandlerServer(context.Background(), mux, impl)
	}

	srv.RegisterService(desc)
}
