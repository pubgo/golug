syntax="proto3";

// GoGo gRPC Example
//
// This example is used to show how to use gRPC and
// gRPC-Gateway with GoGo Protobuf.
package hello;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "gogoproto/gogo.proto";
import "go-proto-validators/validator.proto";

option go_package = "./;hello";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/gogo/grpc-example";
    description: "gRPC example repository";
  }
  schemes: HTTPS;
};

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;

service UserService {
  rpc AddUser(User) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v1/users"
      body: "*"
    };
  }

  rpc GetUser(User) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/api/v1/users"
    };
  }

  rpc ListUsers(ListUsersRequest) returns (stream User) {
    option (google.api.http) = {
      get: "/api/v1/users"
    };
  }

  rpc ListUsersByRole(stream UserRole) returns (stream User) {
    option (google.api.http) = {
      get: "/api/v1/users/role"
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/api/v1/users/{user.id}"
      body: "*"
    };
  }
}

enum Role {
  GUEST = 0;
  MEMBER = 1;
  ADMIN = 2;
}

message User {
  uint32 id = 1 [
    (validator.field) = {int_gt: 0,human_error: "ID must be a positive integer"}
  ];
  Role role = 2;
  google.protobuf.Timestamp create_date = 3 [
    (gogoproto.stdtime) = true
  ];
}

message UserRole {
  Role role = 1;
  google.protobuf.ListValue lists = 2;
  map <string, google.protobuf.ListValue> headers = 3;
}

message UpdateUserRequest {
  // The user resource which replaces the resource on the server.
  User user = 1;

  // The update mask applies to the resource. For the `FieldMask` definition,
  // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
  google.protobuf.FieldMask update_mask = 2;
}

message ListUsersRequest {
  // Only list users created after this timestamp
  google.protobuf.Timestamp created_since = 1 [
    (gogoproto.stdtime) = true
  ];
  // Only list users older than this Duration
  google.protobuf.Duration older_than = 2 [
    (gogoproto.stdduration) = true
  ];
}