// Code generated by protoc-gen-golug. DO NOT EDIT.
// source: example/proto/hello/api.proto

package hello

import (
	"reflect"

	"github.com/gofiber/fiber/v2"
	"github.com/pubgo/golug/client/grpclient"
	"github.com/pubgo/golug/gutils"
	"github.com/pubgo/golug/xgen"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

var _ = gutils.Decode

func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "hello.TestApi",
		Name:          "Version",
		Method:        "POST",
		Path:          "/hello/test_api/version",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "hello.TestApi",
		Name:          "VersionTest",
		Method:        "GET",
		Path:          "/v1/example/versiontest",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	xgen.Add(reflect.ValueOf(RegisterTestApiServer), mthList)
	xgen.Add(reflect.ValueOf(RegisterTestApiGateway), nil)
}

func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "hello.TestApiV2",
		Name:          "Version1",
		Method:        "POST",
		Path:          "/v2/example/version",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "hello.TestApiV2",
		Name:          "VersionTest1",
		Method:        "POST",
		Path:          "/v2/example/versiontest",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	xgen.Add(reflect.ValueOf(RegisterTestApiV2Server), mthList)
	xgen.Add(reflect.ValueOf(RegisterTestApiV2Gateway), nil)
}

func GetTestApiClient(srv string, opts ...grpc.DialOption) (TestApiClient, error) {
	c, err := grpclient.Client(srv, opts...).Get()
	return &testApiClient{c}, err
}

func GetTestApiV2Client(srv string, opts ...grpc.DialOption) (TestApiV2Client, error) {
	c, err := grpclient.Client(srv, opts...).Get()
	return &testApiV2Client{c}, err
}

func RegisterTestApiGateway(srv string, g fiber.Router, opts ...grpc.DialOption) error {
	client := grpclient.Client(srv, opts...)
	g.Add("POST", "/hello/test_api/version", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req TestReq
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		conn, err := client.Get()
		if err != nil {
			return err
		}
		c := &testApiClient{conn}
		resp, err := c.Version(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	g.Add("GET", "/v1/example/versiontest", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req TestReq
		var data = make(map[string]interface{})
		ctx.Context().QueryArgs().VisitAll(func(key, value []byte) { data[string(key)] = string(value) })
		if err := gutils.Decode(data, &req); err != nil {
			return err
		}

		conn, err := client.Get()
		if err != nil {
			return err
		}
		c := &testApiClient{conn}
		resp, err := c.VersionTest(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	return nil
}

func RegisterTestApiV2Gateway(srv string, g fiber.Router, opts ...grpc.DialOption) error {
	client := grpclient.Client(srv, opts...)
	g.Add("POST", "/v2/example/version", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req TestReq
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		conn, err := client.Get()
		if err != nil {
			return err
		}
		c := &testApiV2Client{conn}
		resp, err := c.Version1(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	g.Add("POST", "/v2/example/versiontest", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req TestReq
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		conn, err := client.Get()
		if err != nil {
			return err
		}
		c := &testApiV2Client{conn}
		resp, err := c.VersionTest1(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	return nil
}
