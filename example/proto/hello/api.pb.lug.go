// Code generated by protoc-gen-lug. DO NOT EDIT.
// source: example/proto/hello/api.proto

package hello

import (
	"reflect"
	"strings"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/utils"
	fb "github.com/pubgo/lug/builder/fiber"
	"github.com/pubgo/lug/pkg/gutil"
	"github.com/pubgo/lug/plugins/grpcc"
	"github.com/pubgo/lug/xgen"
	"github.com/pubgo/xerror"
	"google.golang.org/grpc"
)

var _ = strings.Trim
var _ = utils.UnsafeString
var _ fiber.Router = nil
var _ = gutil.MapFormByTag
var _ = fb.Cfg{}

func GetTestApiClient(srv string, optFns ...func(service string) []grpc.DialOption) func() (TestApiClient, error) {
	client := grpcc.GetClient(srv, optFns...)
	return func() (TestApiClient, error) {
		c, err := client.Get()
		return &testApiClient{c}, xerror.WrapF(err, "srv: %s", srv)
	}
}

func GetTestApiV2Client(srv string, optFns ...func(service string) []grpc.DialOption) func() (TestApiV2Client, error) {
	client := grpcc.GetClient(srv, optFns...)
	return func() (TestApiV2Client, error) {
		c, err := client.Get()
		return &testApiV2Client{c}, xerror.WrapF(err, "srv: %s", srv)
	}
}

func init() {
	var mthList []xgen.GrpcRestHandler

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:      "hello.TestApi",
		Name:         "Version",
		Method:       "GET",
		Path:         "/v1/version",
		ClientStream: "False" == "True",
		ServerStream: "False" == "True",
		DefaultUrl:   "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:      "hello.TestApi",
		Name:         "VersionTest",
		Method:       "GET",
		Path:         "/v1/example/versiontest",
		ClientStream: "False" == "True",
		ServerStream: "False" == "True",
		DefaultUrl:   "False" == "True",
	})

	xgen.Add(reflect.ValueOf(RegisterTestApiServer), mthList)
	xgen.Add(reflect.ValueOf(RegisterTestApiRestServer), nil)
	xgen.Add(reflect.ValueOf(RegisterTestApiHandler), nil)
}

func init() {
	var mthList []xgen.GrpcRestHandler

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:      "hello.TestApiV2",
		Name:         "Version1",
		Method:       "POST",
		Path:         "/v2/example/version/{name}",
		ClientStream: "False" == "True",
		ServerStream: "False" == "True",
		DefaultUrl:   "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:      "hello.TestApiV2",
		Name:         "VersionTest1",
		Method:       "POST",
		Path:         "/v2/example/versiontest",
		ClientStream: "False" == "True",
		ServerStream: "False" == "True",
		DefaultUrl:   "False" == "True",
	})

	xgen.Add(reflect.ValueOf(RegisterTestApiV2Server), mthList)
	xgen.Add(reflect.ValueOf(RegisterTestApiV2RestServer), nil)
	xgen.Add(reflect.ValueOf(RegisterTestApiV2Handler), nil)
}

func RegisterTestApiRestServer(app fiber.Router, server TestApiServer) {
	xerror.Assert(app == nil || server == nil, "app is nil or server is nil")

	// restful
	app.Add("GET", "/v1/version", func(ctx *fiber.Ctx) error {
		var req = new(TestReq)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := utils.UnsafeString(key)
			v := utils.UnsafeString(val)
			if strings.Contains(v, ",") && gutil.EqualFieldType(req, reflect.Slice, k) {
				values := strings.Split(v, ",")
				for i := 0; i < len(values); i++ {
					data[k] = append(data[k], values[i])
				}
			} else {
				data[k] = append(data[k], v)
			}
		})
		xerror.Panic(gutil.MapFormByTag(req, data, "json"))
		var resp, err = server.Version(ctx.UserContext(), req)
		if err != nil {
			return err
		}

		return ctx.JSON(resp)
	})

	// restful
	app.Add("GET", "/v1/example/versiontest", func(ctx *fiber.Ctx) error {
		var req = new(TestReq)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := utils.UnsafeString(key)
			v := utils.UnsafeString(val)
			if strings.Contains(v, ",") && gutil.EqualFieldType(req, reflect.Slice, k) {
				values := strings.Split(v, ",")
				for i := 0; i < len(values); i++ {
					data[k] = append(data[k], values[i])
				}
			} else {
				data[k] = append(data[k], v)
			}
		})
		xerror.Panic(gutil.MapFormByTag(req, data, "json"))
		var resp, err = server.VersionTest(ctx.UserContext(), req)
		if err != nil {
			return err
		}

		return ctx.JSON(resp)
	})

}

func RegisterTestApiV2RestServer(app fiber.Router, server TestApiV2Server) {
	xerror.Assert(app == nil || server == nil, "app is nil or server is nil")

	// restful
	app.Add("POST", "/v2/example/version/{name}", func(ctx *fiber.Ctx) error {
		var req = new(TestReq)
		if err := ctx.BodyParser(req); err != nil {
			return xerror.Wrap(err)
		}

		var resp, err = server.Version1(ctx.UserContext(), req)
		if err != nil {
			return err
		}

		return ctx.JSON(resp)
	})

	// restful
	app.Add("POST", "/v2/example/versiontest", func(ctx *fiber.Ctx) error {
		var req = new(TestReq)
		if err := ctx.BodyParser(req); err != nil {
			return xerror.Wrap(err)
		}

		var resp, err = server.VersionTest1(ctx.UserContext(), req)
		if err != nil {
			return err
		}

		return ctx.JSON(resp)
	})

}
