// Code generated by protoc-gen-golug. DO NOT EDIT.
// source: example/proto/login/login.proto

package login

import (
	"reflect"

	"github.com/gofiber/fiber/v2"
	"github.com/pubgo/golug/client/grpclient"
	"github.com/pubgo/golug/gutils"
	"github.com/pubgo/golug/xgen"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

var _ = gutils.Decode

func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "login.Login",
		Name:          "Login",
		Method:        "POST",
		Path:          "/user/login/login",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "login.Login",
		Name:          "Authenticate",
		Method:        "POST",
		Path:          "/user/login/authenticate",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	xgen.Add(reflect.ValueOf(RegisterLoginServer), mthList)
	xgen.Add(reflect.ValueOf(RegisterLoginGateway), nil)
}

func GetLoginClient(srv string, opts ...grpc.DialOption) (LoginClient, error) {
	c, err := grpclient.Client(srv, opts...).Get()
	return &loginClient{c}, err
}

func RegisterLoginGateway(srv string, g fiber.Router, opts ...grpc.DialOption) error {
	client := grpclient.Client(srv, opts...)
	g.Add("POST", "/user/login/login", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req LoginRequest
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		conn, err := client.Get()
		if err != nil {
			return err
		}
		c := &loginClient{conn}
		resp, err := c.Login(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	g.Add("POST", "/user/login/authenticate", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req AuthenticateRequest
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		conn, err := client.Get()
		if err != nil {
			return err
		}
		c := &loginClient{conn}
		resp, err := c.Authenticate(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	return nil
}
