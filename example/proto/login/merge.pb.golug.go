// Code generated by protoc-gen-golug. DO NOT EDIT.
// source: example/proto/login/merge.proto

package login

import (
	"reflect"

	"github.com/gofiber/fiber/v2"
	"github.com/pubgo/golug/golug_client/grpclient"
	"github.com/pubgo/golug/golug_xgen"
	"github.com/pubgo/golug/pkg/golug_utils"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

var _ = golug_utils.Decode

func init() {
	var mthList []golug_xgen.GrpcRestHandler
	mthList = append(mthList, golug_xgen.GrpcRestHandler{
		Service:       "login.Merge",
		Name:          "Telephone",
		Method:        "POST",
		Path:          "/user/merge/telephone",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, golug_xgen.GrpcRestHandler{
		Service:       "login.Merge",
		Name:          "TelephoneCheck",
		Method:        "POST",
		Path:          "/user/merge/telephone-check",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, golug_xgen.GrpcRestHandler{
		Service:       "login.Merge",
		Name:          "WeChat",
		Method:        "POST",
		Path:          "/user/merge/we-chat",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, golug_xgen.GrpcRestHandler{
		Service:       "login.Merge",
		Name:          "WeChatCheck",
		Method:        "POST",
		Path:          "/user/merge/we-chat-check",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, golug_xgen.GrpcRestHandler{
		Service:       "login.Merge",
		Name:          "WeChatUnMerge",
		Method:        "POST",
		Path:          "/user/merge/we-chat-un-merge",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	golug_xgen.Add(reflect.ValueOf(RegisterMergeServer), mthList)
	golug_xgen.Add(reflect.ValueOf(RegisterMergeGateway), nil)
}

func GetMergeClient(srv string, opts ...grpc.DialOption) (MergeClient, error) {
	c, err := grpclient.New(srv, opts...)
	return &mergeClient{c}, err
}

func RegisterMergeGateway(srv string, g fiber.Router, opts ...grpc.DialOption) error {
	c, err := GetMergeClient(srv, opts...)
	if err != nil {
		return err
	}
	g.Add("POST", "/user/merge/telephone", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req TelephoneRequest
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		resp, err := c.Telephone(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	g.Add("POST", "/user/merge/telephone-check", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req TelephoneRequest
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		resp, err := c.TelephoneCheck(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	g.Add("POST", "/user/merge/we-chat", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req WeChatRequest
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		resp, err := c.WeChat(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	g.Add("POST", "/user/merge/we-chat-check", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req WeChatRequest
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		resp, err := c.WeChatCheck(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	g.Add("POST", "/user/merge/we-chat-un-merge", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req WeChatUnMergeRequest
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		resp, err := c.WeChatUnMerge(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	return nil
}
