// Code generated by protoc-gen-golug. DO NOT EDIT.
// source: example/proto/login/code.proto

package login

import (
	"reflect"

	"github.com/gofiber/fiber/v2"
	"github.com/pubgo/golug/client/grpclient"
	"github.com/pubgo/golug/gutils"
	"github.com/pubgo/golug/xgen"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

var _ = gutils.Decode

func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "login.Code",
		Name:          "SendCode",
		Method:        "POST",
		Path:          "/user/code/send-code",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "login.Code",
		Name:          "Verify",
		Method:        "POST",
		Path:          "/user/code/verify",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "login.Code",
		Name:          "IsCheckImageCode",
		Method:        "POST",
		Path:          "/user/code/is-check-image-code",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "login.Code",
		Name:          "VerifyImageCode",
		Method:        "POST",
		Path:          "/user/code/verify-image-code",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "login.Code",
		Name:          "GetSendStatus",
		Method:        "POST",
		Path:          "/user/code/get-send-status",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	xgen.Add(reflect.ValueOf(RegisterCodeServer), mthList)
	xgen.Add(reflect.ValueOf(RegisterCodeGateway), nil)
}

func GetCodeClient(srv string, opts ...grpc.DialOption) (CodeClient, error) {
	c, err := grpclient.Get(srv, opts...)
	return &codeClient{c}, err
}

func RegisterCodeGateway(srv string, g fiber.Router, opts ...grpc.DialOption) error {
	c, err := GetCodeClient(srv, opts...)
	if err != nil {
		return err
	}
	g.Add("POST", "/user/code/send-code", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req SendCodeRequest
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		resp, err := c.SendCode(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	g.Add("POST", "/user/code/verify", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req VerifyRequest
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		resp, err := c.Verify(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	g.Add("POST", "/user/code/is-check-image-code", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req IsCheckImageCodeRequest
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		resp, err := c.IsCheckImageCode(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	g.Add("POST", "/user/code/verify-image-code", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req VerifyImageCodeRequest
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		resp, err := c.VerifyImageCode(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	g.Add("POST", "/user/code/get-send-status", func(ctx *fiber.Ctx) error {
		p := metadata.Pairs()
		ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

		var req GetSendStatusRequest
		if err := ctx.BodyParser(&req); err != nil {
			return err
		}

		resp, err := c.GetSendStatus(metadata.NewIncomingContext(ctx.Context(), p), &req)
		if err != nil {
			return err
		}
		return ctx.JSON(resp)
	})

	return nil
}
