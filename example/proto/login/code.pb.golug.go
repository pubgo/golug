// Code generated by protoc-gen-golug. DO NOT EDIT.
// source: example/proto/login/code.proto

package login

import (
	"reflect"

	"github.com/pubgo/golug/client/grpclient"
	"github.com/pubgo/golug/xgen"
	"google.golang.org/grpc"
)

func GetCodeClient(srv string, opts ...grpc.DialOption) func() (CodeClient, error) {
	client := grpclient.Client(srv, opts...)
	return func() (CodeClient, error) {
		c, err := client.Get()
		return &codeClient{c}, err
	}
}

func init() {

	var mthList []xgen.GrpcRestHandler

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "login.Code",
		Name:          "SendCode",
		Method:        "POST",
		Path:          "/user/code/send-code",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "login.Code",
		Name:          "Verify",
		Method:        "POST",
		Path:          "/user/code/verify",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "login.Code",
		Name:          "IsCheckImageCode",
		Method:        "POST",
		Path:          "/user/code/is-check-image-code",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "login.Code",
		Name:          "VerifyImageCode",
		Method:        "POST",
		Path:          "/user/code/verify-image-code",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	mthList = append(mthList, xgen.GrpcRestHandler{
		Service:       "login.Code",
		Name:          "GetSendStatus",
		Method:        "POST",
		Path:          "/user/code/get-send-status",
		ClientStream:  "False" == "True",
		ServerStreams: "False" == "True",
	})

	xgen.Add(reflect.ValueOf(RegisterCodeServer), mthList)

	xgen.Add(reflect.ValueOf(RegisterCodeHandlerFromEndpoint), nil)

}
