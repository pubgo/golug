// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package permpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrgServiceClient is the client API for OrgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgServiceClient interface {
	// CreateOrg init org, create org role and bind all function permissions, the method is idempotent
	// {org_id} is required
	// when {user_id} is set, {user_id} will be admin
	CreateOrg(ctx context.Context, in *CreateOrgRequest, opts ...grpc.CallOption) (*CreateOrgResponse, error)
	// delete org all perms and data
	// {org_id} is required
	DeleteOrg(ctx context.Context, in *DeleteOrgRequest, opts ...grpc.CallOption) (*DeleteOrgResponse, error)
	// transfer org admin to {new_user_id}, then {user_id} will only lose the admin role, and other roles will be retained
	// all parameters are required
	TransferOrg(ctx context.Context, in *TransferOrgRequest, opts ...grpc.CallOption) (*TransferOrgResponse, error)
	// list all org
	ListOrg(ctx context.Context, in *ListOrgRequest, opts ...grpc.CallOption) (*ListOrgResponse, error)
}

type orgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgServiceClient(cc grpc.ClientConnInterface) OrgServiceClient {
	return &orgServiceClient{cc}
}

func (c *orgServiceClient) CreateOrg(ctx context.Context, in *CreateOrgRequest, opts ...grpc.CallOption) (*CreateOrgResponse, error) {
	out := new(CreateOrgResponse)
	err := c.cc.Invoke(ctx, "/perm.v1.OrgService/CreateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) DeleteOrg(ctx context.Context, in *DeleteOrgRequest, opts ...grpc.CallOption) (*DeleteOrgResponse, error) {
	out := new(DeleteOrgResponse)
	err := c.cc.Invoke(ctx, "/perm.v1.OrgService/DeleteOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) TransferOrg(ctx context.Context, in *TransferOrgRequest, opts ...grpc.CallOption) (*TransferOrgResponse, error) {
	out := new(TransferOrgResponse)
	err := c.cc.Invoke(ctx, "/perm.v1.OrgService/TransferOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgServiceClient) ListOrg(ctx context.Context, in *ListOrgRequest, opts ...grpc.CallOption) (*ListOrgResponse, error) {
	out := new(ListOrgResponse)
	err := c.cc.Invoke(ctx, "/perm.v1.OrgService/ListOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgServiceServer is the server API for OrgService service.
// All implementations should embed UnimplementedOrgServiceServer
// for forward compatibility
type OrgServiceServer interface {
	// CreateOrg init org, create org role and bind all function permissions, the method is idempotent
	// {org_id} is required
	// when {user_id} is set, {user_id} will be admin
	CreateOrg(context.Context, *CreateOrgRequest) (*CreateOrgResponse, error)
	// delete org all perms and data
	// {org_id} is required
	DeleteOrg(context.Context, *DeleteOrgRequest) (*DeleteOrgResponse, error)
	// transfer org admin to {new_user_id}, then {user_id} will only lose the admin role, and other roles will be retained
	// all parameters are required
	TransferOrg(context.Context, *TransferOrgRequest) (*TransferOrgResponse, error)
	// list all org
	ListOrg(context.Context, *ListOrgRequest) (*ListOrgResponse, error)
}

// UnimplementedOrgServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOrgServiceServer struct {
}

func (UnimplementedOrgServiceServer) CreateOrg(context.Context, *CreateOrgRequest) (*CreateOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrg not implemented")
}
func (UnimplementedOrgServiceServer) DeleteOrg(context.Context, *DeleteOrgRequest) (*DeleteOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrg not implemented")
}
func (UnimplementedOrgServiceServer) TransferOrg(context.Context, *TransferOrgRequest) (*TransferOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOrg not implemented")
}
func (UnimplementedOrgServiceServer) ListOrg(context.Context, *ListOrgRequest) (*ListOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrg not implemented")
}

// UnsafeOrgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgServiceServer will
// result in compilation errors.
type UnsafeOrgServiceServer interface {
	mustEmbedUnimplementedOrgServiceServer()
}

func RegisterOrgServiceServer(s grpc.ServiceRegistrar, srv OrgServiceServer) {
	s.RegisterService(&OrgService_ServiceDesc, srv)
}

func _OrgService_CreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).CreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perm.v1.OrgService/CreateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).CreateOrg(ctx, req.(*CreateOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_DeleteOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).DeleteOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perm.v1.OrgService/DeleteOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).DeleteOrg(ctx, req.(*DeleteOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_TransferOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).TransferOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perm.v1.OrgService/TransferOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).TransferOrg(ctx, req.(*TransferOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgService_ListOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).ListOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perm.v1.OrgService/ListOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).ListOrg(ctx, req.(*ListOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrgService_ServiceDesc is the grpc.ServiceDesc for OrgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "perm.v1.OrgService",
	HandlerType: (*OrgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrg",
			Handler:    _OrgService_CreateOrg_Handler,
		},
		{
			MethodName: "DeleteOrg",
			Handler:    _OrgService_DeleteOrg_Handler,
		},
		{
			MethodName: "TransferOrg",
			Handler:    _OrgService_TransferOrg_Handler,
		},
		{
			MethodName: "ListOrg",
			Handler:    _OrgService_ListOrg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "perm/v1/org.proto",
}
