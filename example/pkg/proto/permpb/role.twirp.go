// Code generated by protoc-gen-twirp v8.1.2, DO NOT EDIT.
// source: perm/v1/role.proto

package permpb

import context "context"
import fmt "fmt"
import http "net/http"
import ioutil "io/ioutil"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// =====================
// RoleService Interface
// =====================

// role grpc service, RoleService provides role management and user role management
type RoleService interface {
	// create role
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)

	// *
	// - delete role by id or name
	// - req: id=12
	// - req: name=admin,org_id=ka
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)

	// *
	// - update role by id or name
	// - req: id=12
	// - req: name=admin,org_id=ka
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)

	// get role by id
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)

	// list role by org_id
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)

	// add role to user
	// all parameters are required
	AddRoleForUser(context.Context, *AddRoleForUserRequest) (*AddRoleForUserResponse, error)

	// delete user org
	// all parameters are required
	// if {role_id} is *, it will delete all role about the user
	DelRoleForUser(context.Context, *DelRoleForUserRequest) (*DelRoleForUserResponse, error)

	// get user all roles
	// {org_id} and {user_id} are required
	GetRolesForUser(context.Context, *GetRolesForUserRequest) (*GetRolesForUserResponse, error)

	// get users from a {role_id}
	// if {role_id} is null, you will get all users of the {org_id}
	GetUsersForRole(context.Context, *GetUsersForRoleRequest) (*GetUsersForRoleResponse, error)
}

// ===========================
// RoleService Protobuf Client
// ===========================

type roleServiceProtobufClient struct {
	client      HTTPClient
	urls        [9]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewRoleServiceProtobufClient creates a Protobuf client that implements the RoleService interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewRoleServiceProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) RoleService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "perm.v1", "RoleService")
	urls := [9]string{
		serviceURL + "CreateRole",
		serviceURL + "DeleteRole",
		serviceURL + "UpdateRole",
		serviceURL + "GetRole",
		serviceURL + "ListRoles",
		serviceURL + "AddRoleForUser",
		serviceURL + "DelRoleForUser",
		serviceURL + "GetRolesForUser",
		serviceURL + "GetUsersForRole",
	}

	return &roleServiceProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *roleServiceProtobufClient) CreateRole(ctx context.Context, in *CreateRoleRequest) (*CreateRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateRole")
	caller := c.callCreateRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateRoleRequest) (*CreateRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateRoleRequest) when calling interceptor")
					}
					return c.callCreateRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceProtobufClient) callCreateRole(ctx context.Context, in *CreateRoleRequest) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceProtobufClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteRole")
	caller := c.callDeleteRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteRoleRequest) (*DeleteRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteRoleRequest) when calling interceptor")
					}
					return c.callDeleteRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceProtobufClient) callDeleteRole(ctx context.Context, in *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceProtobufClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateRole")
	caller := c.callUpdateRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateRoleRequest) (*UpdateRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateRoleRequest) when calling interceptor")
					}
					return c.callUpdateRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceProtobufClient) callUpdateRole(ctx context.Context, in *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceProtobufClient) GetRole(ctx context.Context, in *GetRoleRequest) (*GetRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRole")
	caller := c.callGetRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetRoleRequest) (*GetRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRoleRequest) when calling interceptor")
					}
					return c.callGetRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceProtobufClient) callGetRole(ctx context.Context, in *GetRoleRequest) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceProtobufClient) ListRoles(ctx context.Context, in *ListRolesRequest) (*ListRolesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "ListRoles")
	caller := c.callListRoles
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListRolesRequest) (*ListRolesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRolesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRolesRequest) when calling interceptor")
					}
					return c.callListRoles(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRolesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRolesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceProtobufClient) callListRoles(ctx context.Context, in *ListRolesRequest) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceProtobufClient) AddRoleForUser(ctx context.Context, in *AddRoleForUserRequest) (*AddRoleForUserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "AddRoleForUser")
	caller := c.callAddRoleForUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddRoleForUserRequest) (*AddRoleForUserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddRoleForUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddRoleForUserRequest) when calling interceptor")
					}
					return c.callAddRoleForUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddRoleForUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddRoleForUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceProtobufClient) callAddRoleForUser(ctx context.Context, in *AddRoleForUserRequest) (*AddRoleForUserResponse, error) {
	out := new(AddRoleForUserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceProtobufClient) DelRoleForUser(ctx context.Context, in *DelRoleForUserRequest) (*DelRoleForUserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "DelRoleForUser")
	caller := c.callDelRoleForUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DelRoleForUserRequest) (*DelRoleForUserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DelRoleForUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DelRoleForUserRequest) when calling interceptor")
					}
					return c.callDelRoleForUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DelRoleForUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DelRoleForUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceProtobufClient) callDelRoleForUser(ctx context.Context, in *DelRoleForUserRequest) (*DelRoleForUserResponse, error) {
	out := new(DelRoleForUserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceProtobufClient) GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest) (*GetRolesForUserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRolesForUser")
	caller := c.callGetRolesForUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetRolesForUserRequest) (*GetRolesForUserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRolesForUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRolesForUserRequest) when calling interceptor")
					}
					return c.callGetRolesForUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRolesForUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRolesForUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceProtobufClient) callGetRolesForUser(ctx context.Context, in *GetRolesForUserRequest) (*GetRolesForUserResponse, error) {
	out := new(GetRolesForUserResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceProtobufClient) GetUsersForRole(ctx context.Context, in *GetUsersForRoleRequest) (*GetUsersForRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "GetUsersForRole")
	caller := c.callGetUsersForRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUsersForRoleRequest) (*GetUsersForRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUsersForRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUsersForRoleRequest) when calling interceptor")
					}
					return c.callGetUsersForRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetUsersForRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetUsersForRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceProtobufClient) callGetUsersForRole(ctx context.Context, in *GetUsersForRoleRequest) (*GetUsersForRoleResponse, error) {
	out := new(GetUsersForRoleResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =======================
// RoleService JSON Client
// =======================

type roleServiceJSONClient struct {
	client      HTTPClient
	urls        [9]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewRoleServiceJSONClient creates a JSON client that implements the RoleService interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewRoleServiceJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) RoleService {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "perm.v1", "RoleService")
	urls := [9]string{
		serviceURL + "CreateRole",
		serviceURL + "DeleteRole",
		serviceURL + "UpdateRole",
		serviceURL + "GetRole",
		serviceURL + "ListRoles",
		serviceURL + "AddRoleForUser",
		serviceURL + "DelRoleForUser",
		serviceURL + "GetRolesForUser",
		serviceURL + "GetUsersForRole",
	}

	return &roleServiceJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *roleServiceJSONClient) CreateRole(ctx context.Context, in *CreateRoleRequest) (*CreateRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "CreateRole")
	caller := c.callCreateRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *CreateRoleRequest) (*CreateRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateRoleRequest) when calling interceptor")
					}
					return c.callCreateRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceJSONClient) callCreateRole(ctx context.Context, in *CreateRoleRequest) (*CreateRoleResponse, error) {
	out := new(CreateRoleResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceJSONClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteRole")
	caller := c.callDeleteRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DeleteRoleRequest) (*DeleteRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteRoleRequest) when calling interceptor")
					}
					return c.callDeleteRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceJSONClient) callDeleteRole(ctx context.Context, in *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceJSONClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateRole")
	caller := c.callUpdateRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *UpdateRoleRequest) (*UpdateRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateRoleRequest) when calling interceptor")
					}
					return c.callUpdateRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceJSONClient) callUpdateRole(ctx context.Context, in *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceJSONClient) GetRole(ctx context.Context, in *GetRoleRequest) (*GetRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRole")
	caller := c.callGetRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetRoleRequest) (*GetRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRoleRequest) when calling interceptor")
					}
					return c.callGetRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceJSONClient) callGetRole(ctx context.Context, in *GetRoleRequest) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceJSONClient) ListRoles(ctx context.Context, in *ListRolesRequest) (*ListRolesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "ListRoles")
	caller := c.callListRoles
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *ListRolesRequest) (*ListRolesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRolesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRolesRequest) when calling interceptor")
					}
					return c.callListRoles(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRolesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRolesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceJSONClient) callListRoles(ctx context.Context, in *ListRolesRequest) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceJSONClient) AddRoleForUser(ctx context.Context, in *AddRoleForUserRequest) (*AddRoleForUserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "AddRoleForUser")
	caller := c.callAddRoleForUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *AddRoleForUserRequest) (*AddRoleForUserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddRoleForUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddRoleForUserRequest) when calling interceptor")
					}
					return c.callAddRoleForUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddRoleForUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddRoleForUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceJSONClient) callAddRoleForUser(ctx context.Context, in *AddRoleForUserRequest) (*AddRoleForUserResponse, error) {
	out := new(AddRoleForUserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceJSONClient) DelRoleForUser(ctx context.Context, in *DelRoleForUserRequest) (*DelRoleForUserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "DelRoleForUser")
	caller := c.callDelRoleForUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *DelRoleForUserRequest) (*DelRoleForUserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DelRoleForUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DelRoleForUserRequest) when calling interceptor")
					}
					return c.callDelRoleForUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DelRoleForUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DelRoleForUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceJSONClient) callDelRoleForUser(ctx context.Context, in *DelRoleForUserRequest) (*DelRoleForUserResponse, error) {
	out := new(DelRoleForUserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceJSONClient) GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest) (*GetRolesForUserResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "GetRolesForUser")
	caller := c.callGetRolesForUser
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetRolesForUserRequest) (*GetRolesForUserResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRolesForUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRolesForUserRequest) when calling interceptor")
					}
					return c.callGetRolesForUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRolesForUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRolesForUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceJSONClient) callGetRolesForUser(ctx context.Context, in *GetRolesForUserRequest) (*GetRolesForUserResponse, error) {
	out := new(GetRolesForUserResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *roleServiceJSONClient) GetUsersForRole(ctx context.Context, in *GetUsersForRoleRequest) (*GetUsersForRoleResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithMethodName(ctx, "GetUsersForRole")
	caller := c.callGetUsersForRole
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *GetUsersForRoleRequest) (*GetUsersForRoleResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUsersForRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUsersForRoleRequest) when calling interceptor")
					}
					return c.callGetUsersForRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetUsersForRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetUsersForRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *roleServiceJSONClient) callGetUsersForRole(ctx context.Context, in *GetUsersForRoleRequest) (*GetUsersForRoleResponse, error) {
	out := new(GetUsersForRoleResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==========================
// RoleService Server Handler
// ==========================

type roleServiceServer struct {
	RoleService
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewRoleServiceServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewRoleServiceServer(svc RoleService, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwads compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &roleServiceServer{
		RoleService:      svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *roleServiceServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *roleServiceServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// RoleServicePathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const RoleServicePathPrefix = "/twirp/perm.v1.RoleService/"

func (s *roleServiceServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "perm.v1")
	ctx = ctxsetters.WithServiceName(ctx, "RoleService")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "perm.v1.RoleService" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "CreateRole":
		s.serveCreateRole(ctx, resp, req)
		return
	case "DeleteRole":
		s.serveDeleteRole(ctx, resp, req)
		return
	case "UpdateRole":
		s.serveUpdateRole(ctx, resp, req)
		return
	case "GetRole":
		s.serveGetRole(ctx, resp, req)
		return
	case "ListRoles":
		s.serveListRoles(ctx, resp, req)
		return
	case "AddRoleForUser":
		s.serveAddRoleForUser(ctx, resp, req)
		return
	case "DelRoleForUser":
		s.serveDelRoleForUser(ctx, resp, req)
		return
	case "GetRolesForUser":
		s.serveGetRolesForUser(ctx, resp, req)
		return
	case "GetUsersForRole":
		s.serveGetUsersForRole(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *roleServiceServer) serveCreateRole(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateRoleJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateRoleProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *roleServiceServer) serveCreateRoleJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(CreateRoleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RoleService.CreateRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateRoleRequest) (*CreateRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateRoleRequest) when calling interceptor")
					}
					return s.RoleService.CreateRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateRoleResponse and nil error while calling CreateRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveCreateRoleProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(CreateRoleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RoleService.CreateRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *CreateRoleRequest) (*CreateRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*CreateRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*CreateRoleRequest) when calling interceptor")
					}
					return s.RoleService.CreateRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*CreateRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*CreateRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *CreateRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CreateRoleResponse and nil error while calling CreateRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveDeleteRole(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteRoleJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteRoleProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *roleServiceServer) serveDeleteRoleJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DeleteRoleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RoleService.DeleteRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteRoleRequest) (*DeleteRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteRoleRequest) when calling interceptor")
					}
					return s.RoleService.DeleteRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteRoleResponse and nil error while calling DeleteRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveDeleteRoleProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DeleteRoleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RoleService.DeleteRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DeleteRoleRequest) (*DeleteRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DeleteRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DeleteRoleRequest) when calling interceptor")
					}
					return s.RoleService.DeleteRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DeleteRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DeleteRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DeleteRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteRoleResponse and nil error while calling DeleteRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveUpdateRole(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateRoleJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateRoleProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *roleServiceServer) serveUpdateRoleJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(UpdateRoleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RoleService.UpdateRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateRoleRequest) (*UpdateRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateRoleRequest) when calling interceptor")
					}
					return s.RoleService.UpdateRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateRoleResponse and nil error while calling UpdateRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveUpdateRoleProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(UpdateRoleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RoleService.UpdateRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *UpdateRoleRequest) (*UpdateRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*UpdateRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*UpdateRoleRequest) when calling interceptor")
					}
					return s.RoleService.UpdateRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*UpdateRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*UpdateRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *UpdateRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateRoleResponse and nil error while calling UpdateRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveGetRole(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetRoleJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetRoleProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *roleServiceServer) serveGetRoleJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetRoleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RoleService.GetRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetRoleRequest) (*GetRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRoleRequest) when calling interceptor")
					}
					return s.RoleService.GetRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetRoleResponse and nil error while calling GetRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveGetRoleProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetRoleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RoleService.GetRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetRoleRequest) (*GetRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRoleRequest) when calling interceptor")
					}
					return s.RoleService.GetRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetRoleResponse and nil error while calling GetRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveListRoles(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListRolesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListRolesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *roleServiceServer) serveListRolesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListRoles")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(ListRolesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RoleService.ListRoles
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListRolesRequest) (*ListRolesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRolesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRolesRequest) when calling interceptor")
					}
					return s.RoleService.ListRoles(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRolesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRolesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListRolesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListRolesResponse and nil error while calling ListRoles. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveListRolesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListRoles")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(ListRolesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RoleService.ListRoles
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *ListRolesRequest) (*ListRolesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*ListRolesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*ListRolesRequest) when calling interceptor")
					}
					return s.RoleService.ListRoles(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*ListRolesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*ListRolesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *ListRolesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListRolesResponse and nil error while calling ListRoles. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveAddRoleForUser(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAddRoleForUserJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveAddRoleForUserProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *roleServiceServer) serveAddRoleForUserJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddRoleForUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(AddRoleForUserRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RoleService.AddRoleForUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddRoleForUserRequest) (*AddRoleForUserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddRoleForUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddRoleForUserRequest) when calling interceptor")
					}
					return s.RoleService.AddRoleForUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddRoleForUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddRoleForUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AddRoleForUserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AddRoleForUserResponse and nil error while calling AddRoleForUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveAddRoleForUserProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "AddRoleForUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(AddRoleForUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RoleService.AddRoleForUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *AddRoleForUserRequest) (*AddRoleForUserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*AddRoleForUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*AddRoleForUserRequest) when calling interceptor")
					}
					return s.RoleService.AddRoleForUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*AddRoleForUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*AddRoleForUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *AddRoleForUserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *AddRoleForUserResponse and nil error while calling AddRoleForUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveDelRoleForUser(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDelRoleForUserJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDelRoleForUserProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *roleServiceServer) serveDelRoleForUserJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DelRoleForUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(DelRoleForUserRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RoleService.DelRoleForUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DelRoleForUserRequest) (*DelRoleForUserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DelRoleForUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DelRoleForUserRequest) when calling interceptor")
					}
					return s.RoleService.DelRoleForUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DelRoleForUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DelRoleForUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DelRoleForUserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DelRoleForUserResponse and nil error while calling DelRoleForUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveDelRoleForUserProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DelRoleForUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(DelRoleForUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RoleService.DelRoleForUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *DelRoleForUserRequest) (*DelRoleForUserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*DelRoleForUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*DelRoleForUserRequest) when calling interceptor")
					}
					return s.RoleService.DelRoleForUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*DelRoleForUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*DelRoleForUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *DelRoleForUserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DelRoleForUserResponse and nil error while calling DelRoleForUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveGetRolesForUser(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetRolesForUserJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetRolesForUserProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *roleServiceServer) serveGetRolesForUserJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRolesForUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetRolesForUserRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RoleService.GetRolesForUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetRolesForUserRequest) (*GetRolesForUserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRolesForUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRolesForUserRequest) when calling interceptor")
					}
					return s.RoleService.GetRolesForUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRolesForUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRolesForUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetRolesForUserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetRolesForUserResponse and nil error while calling GetRolesForUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveGetRolesForUserProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRolesForUser")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetRolesForUserRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RoleService.GetRolesForUser
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetRolesForUserRequest) (*GetRolesForUserResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetRolesForUserRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetRolesForUserRequest) when calling interceptor")
					}
					return s.RoleService.GetRolesForUser(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetRolesForUserResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetRolesForUserResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetRolesForUserResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetRolesForUserResponse and nil error while calling GetRolesForUser. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveGetUsersForRole(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetUsersForRoleJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetUsersForRoleProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *roleServiceServer) serveGetUsersForRoleJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUsersForRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(GetUsersForRoleRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.RoleService.GetUsersForRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUsersForRoleRequest) (*GetUsersForRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUsersForRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUsersForRoleRequest) when calling interceptor")
					}
					return s.RoleService.GetUsersForRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetUsersForRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetUsersForRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetUsersForRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetUsersForRoleResponse and nil error while calling GetUsersForRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) serveGetUsersForRoleProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetUsersForRole")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(GetUsersForRoleRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.RoleService.GetUsersForRole
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *GetUsersForRoleRequest) (*GetUsersForRoleResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*GetUsersForRoleRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*GetUsersForRoleRequest) when calling interceptor")
					}
					return s.RoleService.GetUsersForRole(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*GetUsersForRoleResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*GetUsersForRoleResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *GetUsersForRoleResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetUsersForRoleResponse and nil error while calling GetUsersForRole. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *roleServiceServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor4, 0
}

func (s *roleServiceServer) ProtocGenTwirpVersion() string {
	return "v8.1.2"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *roleServiceServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "perm.v1", "RoleService")
}

var twirpFileDescriptor4 = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xdf, 0x6f, 0xd3, 0x30,
	0x10, 0xc7, 0xdb, 0xae, 0x3f, 0xe8, 0x15, 0x5a, 0x6a, 0x6d, 0x6d, 0x09, 0x12, 0xeb, 0xcc, 0xcb,
	0x78, 0x49, 0xb5, 0x81, 0x18, 0x12, 0x12, 0x12, 0x50, 0x31, 0x26, 0xa1, 0x3d, 0x64, 0x1a, 0x0f,
	0x7b, 0x19, 0x19, 0xb1, 0xa6, 0x68, 0xe9, 0x1c, 0xec, 0xb4, 0x12, 0x12, 0x7f, 0x20, 0x7f, 0x16,
	0x3a, 0xc7, 0x4d, 0x9c, 0x1f, 0x85, 0x4c, 0x68, 0x4f, 0x9b, 0x7d, 0xe7, 0x8f, 0xbf, 0x77, 0xfd,
	0x5e, 0x0c, 0x24, 0x64, 0x62, 0x31, 0x5b, 0x1d, 0xcc, 0x04, 0x0f, 0x98, 0x1d, 0x0a, 0x1e, 0x71,
	0xd2, 0xc1, 0x3d, 0x7b, 0x75, 0x40, 0xbf, 0xc1, 0xce, 0x7b, 0xcf, 0x73, 0x78, 0xc0, 0x3e, 0x71,
	0x71, 0x2e, 0x99, 0x70, 0xd8, 0x8f, 0x25, 0x93, 0x11, 0xd9, 0x81, 0x36, 0x17, 0xd7, 0x97, 0xbe,
	0x37, 0xa9, 0x4f, 0xeb, 0xfb, 0x5d, 0xa7, 0xc5, 0xc5, 0xf5, 0x89, 0x47, 0xc6, 0xd0, 0x59, 0x4a,
	0x26, 0x70, 0xbf, 0xa1, 0xf6, 0xdb, 0xb8, 0x8c, 0x03, 0xc8, 0xc7, 0xc0, 0x56, 0x1c, 0xc0, 0xe5,
	0x89, 0x47, 0xf7, 0x61, 0x94, 0xbf, 0x41, 0x86, 0xfc, 0x56, 0x32, 0xd2, 0x87, 0x06, 0xbf, 0x51,
	0xf8, 0x07, 0x4e, 0x83, 0xdf, 0xa0, 0x96, 0x39, 0x0b, 0xee, 0x59, 0x4b, 0xfe, 0x86, 0x0d, 0x5a,
	0x3e, 0xc3, 0xe8, 0x98, 0x45, 0x98, 0x29, 0xff, 0x4f, 0x8c, 0x26, 0x21, 0x01, 0x49, 0x48, 0xfc,
	0x37, 0x69, 0xad, 0xbe, 0x91, 0x51, 0xff, 0x1a, 0x86, 0x1f, 0x05, 0x73, 0x23, 0x66, 0x42, 0xf6,
	0xa0, 0x89, 0x61, 0x85, 0xe8, 0x1d, 0x3e, 0xb2, 0xf5, 0x0f, 0x6b, 0xab, 0x1c, 0x15, 0xa2, 0xbf,
	0xa0, 0x89, 0x2b, 0xac, 0x51, 0xdf, 0xd5, 0x72, 0x1a, 0xbe, 0x47, 0x08, 0x34, 0x6f, 0xdd, 0x05,
	0xd3, 0xb7, 0xa8, 0xff, 0xc9, 0x08, 0xda, 0x32, 0x72, 0xa3, 0xa5, 0x5c, 0x77, 0x2e, 0x5e, 0x19,
	0x5a, 0x9b, 0xa6, 0xd6, 0x3d, 0x78, 0xe8, 0xf9, 0x32, 0x0c, 0xdc, 0x9f, 0x97, 0x0a, 0xd5, 0x56,
	0xc1, 0x9e, 0xde, 0x3b, 0x75, 0x17, 0x8c, 0x1e, 0x01, 0x31, 0x55, 0xeb, 0x7e, 0x57, 0x90, 0x7d,
	0x0a, 0xc3, 0x39, 0x0b, 0x58, 0xb6, 0xdc, 0x2a, 0x35, 0x94, 0x6b, 0xa5, 0xdb, 0x40, 0x4c, 0x5e,
	0x2c, 0x04, 0x9b, 0x7a, 0x1e, 0x7a, 0x77, 0x6f, 0xea, 0x11, 0x10, 0xf3, 0x5c, 0xf5, 0xb2, 0xa6,
	0xd0, 0xd7, 0xce, 0xda, 0x50, 0x13, 0x7d, 0x05, 0x83, 0x24, 0xa3, 0x3a, 0xf7, 0x05, 0x3c, 0xfe,
	0xe2, 0xcb, 0xd8, 0xb2, 0x7f, 0x77, 0x18, 0x7d, 0x03, 0x43, 0x23, 0x55, 0x5f, 0xf1, 0x1c, 0x5a,
	0xc8, 0x91, 0x93, 0xfa, 0x74, 0xab, 0x78, 0x47, 0x1c, 0xa3, 0x17, 0x30, 0x50, 0xb3, 0x50, 0xc9,
	0xc5, 0x77, 0x1c, 0xce, 0x19, 0x8c, 0x0b, 0x83, 0xa2, 0xb5, 0x6d, 0x43, 0x0b, 0x4f, 0xc7, 0xda,
	0xba, 0x4e, 0xbc, 0xd0, 0x07, 0xb2, 0x33, 0x9a, 0x1e, 0x48, 0x8b, 0xe9, 0x6a, 0xf5, 0x87, 0xbf,
	0x5b, 0xd0, 0xc3, 0xf4, 0x33, 0x26, 0x56, 0xfe, 0x77, 0x46, 0x8e, 0x01, 0x52, 0x6b, 0x12, 0x2b,
	0xa9, 0xb8, 0x30, 0x65, 0xd6, 0xd3, 0xd2, 0x98, 0xb6, 0x50, 0x0d, 0x41, 0xa9, 0xb5, 0x0c, 0x50,
	0xc1, 0xbf, 0x06, 0xa8, 0xc4, 0x8b, 0x0a, 0x94, 0xba, 0xca, 0x00, 0x15, 0x2c, 0x6a, 0x80, 0x8a,
	0x36, 0xa4, 0x35, 0xf2, 0x0e, 0x3a, 0xba, 0x37, 0x64, 0x9c, 0x64, 0x66, 0x7d, 0x67, 0x4d, 0x8a,
	0x81, 0xe4, 0xfc, 0x1c, 0xba, 0x89, 0x45, 0xc8, 0x93, 0x24, 0x31, 0xef, 0x30, 0xcb, 0x2a, 0x0b,
	0x25, 0x94, 0x33, 0xe8, 0x67, 0xbf, 0xfd, 0xe4, 0x59, 0x92, 0x5f, 0xfa, 0xec, 0x58, 0xbb, 0x1b,
	0xe3, 0x26, 0x34, 0xfb, 0x11, 0x37, 0xa0, 0xa5, 0xef, 0x87, 0x01, 0x2d, 0xff, 0xfa, 0xd3, 0x1a,
	0xf9, 0x9a, 0xcc, 0xdc, 0xda, 0x4b, 0x64, 0x37, 0xdf, 0x9e, 0xdc, 0x4b, 0x60, 0x4d, 0x37, 0x27,
	0xe4, 0xb8, 0xa6, 0xa9, 0xb3, 0xdc, 0x92, 0x77, 0x21, 0xcb, 0x2d, 0x9b, 0x07, 0x5a, 0xfb, 0x30,
	0xbc, 0x18, 0xd8, 0x33, 0x4c, 0x0b, 0xaf, 0xde, 0xc6, 0x7f, 0xae, 0xda, 0xea, 0x69, 0x7f, 0xf9,
	0x27, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x21, 0x4f, 0xb5, 0xf0, 0x07, 0x00, 0x00,
}
