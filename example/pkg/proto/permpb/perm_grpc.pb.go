// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package permpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PermServiceClient is the client API for PermService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermServiceClient interface {
	Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*EnforceResponse, error)
	ListResources(ctx context.Context, in *PermServiceListResourcesRequest, opts ...grpc.CallOption) (*PermServiceListResourcesResponse, error)
	ListMenus(ctx context.Context, in *PermServiceListMenusRequest, opts ...grpc.CallOption) (*PermServiceListMenusResponse, error)
	ListGroups(ctx context.Context, in *PermServiceListGroupsRequest, opts ...grpc.CallOption) (*PermServiceListGroupsResponse, error)
	SaveRolePerm(ctx context.Context, in *PermServiceSaveRolePermRequest, opts ...grpc.CallOption) (*PermServiceSaveRolePermResponse, error)
}

type permServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermServiceClient(cc grpc.ClientConnInterface) PermServiceClient {
	return &permServiceClient{cc}
}

func (c *permServiceClient) Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*EnforceResponse, error) {
	out := new(EnforceResponse)
	err := c.cc.Invoke(ctx, "/perm.v1.PermService/Enforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permServiceClient) ListResources(ctx context.Context, in *PermServiceListResourcesRequest, opts ...grpc.CallOption) (*PermServiceListResourcesResponse, error) {
	out := new(PermServiceListResourcesResponse)
	err := c.cc.Invoke(ctx, "/perm.v1.PermService/ListResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permServiceClient) ListMenus(ctx context.Context, in *PermServiceListMenusRequest, opts ...grpc.CallOption) (*PermServiceListMenusResponse, error) {
	out := new(PermServiceListMenusResponse)
	err := c.cc.Invoke(ctx, "/perm.v1.PermService/ListMenus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permServiceClient) ListGroups(ctx context.Context, in *PermServiceListGroupsRequest, opts ...grpc.CallOption) (*PermServiceListGroupsResponse, error) {
	out := new(PermServiceListGroupsResponse)
	err := c.cc.Invoke(ctx, "/perm.v1.PermService/ListGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permServiceClient) SaveRolePerm(ctx context.Context, in *PermServiceSaveRolePermRequest, opts ...grpc.CallOption) (*PermServiceSaveRolePermResponse, error) {
	out := new(PermServiceSaveRolePermResponse)
	err := c.cc.Invoke(ctx, "/perm.v1.PermService/SaveRolePerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermServiceServer is the server API for PermService service.
// All implementations should embed UnimplementedPermServiceServer
// for forward compatibility
type PermServiceServer interface {
	Enforce(context.Context, *EnforceRequest) (*EnforceResponse, error)
	ListResources(context.Context, *PermServiceListResourcesRequest) (*PermServiceListResourcesResponse, error)
	ListMenus(context.Context, *PermServiceListMenusRequest) (*PermServiceListMenusResponse, error)
	ListGroups(context.Context, *PermServiceListGroupsRequest) (*PermServiceListGroupsResponse, error)
	SaveRolePerm(context.Context, *PermServiceSaveRolePermRequest) (*PermServiceSaveRolePermResponse, error)
}

// UnimplementedPermServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPermServiceServer struct {
}

func (UnimplementedPermServiceServer) Enforce(context.Context, *EnforceRequest) (*EnforceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enforce not implemented")
}
func (UnimplementedPermServiceServer) ListResources(context.Context, *PermServiceListResourcesRequest) (*PermServiceListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedPermServiceServer) ListMenus(context.Context, *PermServiceListMenusRequest) (*PermServiceListMenusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenus not implemented")
}
func (UnimplementedPermServiceServer) ListGroups(context.Context, *PermServiceListGroupsRequest) (*PermServiceListGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroups not implemented")
}
func (UnimplementedPermServiceServer) SaveRolePerm(context.Context, *PermServiceSaveRolePermRequest) (*PermServiceSaveRolePermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRolePerm not implemented")
}

// UnsafePermServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermServiceServer will
// result in compilation errors.
type UnsafePermServiceServer interface {
	mustEmbedUnimplementedPermServiceServer()
}

func RegisterPermServiceServer(s grpc.ServiceRegistrar, srv PermServiceServer) {
	s.RegisterService(&PermService_ServiceDesc, srv)
}

func _PermService_Enforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).Enforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perm.v1.PermService/Enforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).Enforce(ctx, req.(*EnforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermService_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermServiceListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perm.v1.PermService/ListResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).ListResources(ctx, req.(*PermServiceListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermService_ListMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermServiceListMenusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).ListMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perm.v1.PermService/ListMenus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).ListMenus(ctx, req.(*PermServiceListMenusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermService_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermServiceListGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perm.v1.PermService/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).ListGroups(ctx, req.(*PermServiceListGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermService_SaveRolePerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermServiceSaveRolePermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermServiceServer).SaveRolePerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/perm.v1.PermService/SaveRolePerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermServiceServer).SaveRolePerm(ctx, req.(*PermServiceSaveRolePermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermService_ServiceDesc is the grpc.ServiceDesc for PermService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "perm.v1.PermService",
	HandlerType: (*PermServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enforce",
			Handler:    _PermService_Enforce_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _PermService_ListResources_Handler,
		},
		{
			MethodName: "ListMenus",
			Handler:    _PermService_ListMenus_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _PermService_ListGroups_Handler,
		},
		{
			MethodName: "SaveRolePerm",
			Handler:    _PermService_SaveRolePerm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "perm/v1/perm.proto",
}
