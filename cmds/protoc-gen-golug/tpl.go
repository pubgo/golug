package main

const tpl = `
// Code generated by protoc-gen-golug. DO NOT EDIT.
{%- if !fd.GetOptions().GetDeprecated() %}
// source: {{fd.GetName()}}
{%- else %}
// {{fd.GetName()}} is a deprecated file.
{%- endif %}

package {{pkg}}
import (
	"reflect"
	"bytes"

	"github.com/pubgo/golug/gutils"
	"google.golang.org/grpc/metadata"
	"github.com/gofiber/fiber/v2"
	"google.golang.org/grpc"
	"github.com/pubgo/x/xutil"
	"github.com/pubgo/golug/xgen"
	"github.com/pubgo/golug/client/grpclient"
)

var _=gutils.Decode

{% for ss in fd.GetService() %}
	func init() {
		var mthList []xgen.GrpcRestHandler
		{%- for m in ss.GetMethod() %}
			mthList = append(mthList, xgen.GrpcRestHandler{
				Service:      "{{pkg}}.{{ss.Name}}",
				Name:         "{{m.GetName()}}",
				Method:       "{{m.HttpMethod}}",
				Path:          "{{m.HttpPath}}",
				ClientStream:  "{{m.CS}}"=="True",
				ServerStreams: "{{m.SS}}"=="True",
			})
		{% endfor %}
		xgen.Add(reflect.ValueOf(Register{{ss.Srv}}Server),mthList)
		xgen.Add(reflect.ValueOf(Register{{ss.Srv}}HandlerFromEndpoint), nil)
	}
{% endfor %}

{% for ss in fd.GetService() %}
	func Get{{ss.Srv}}Client(srv string, opts ...grpc.DialOption) func() ({{ss.Srv}}Client,error) {
		client := grpclient.Client(srv, opts...)
		return func() ({{ss.Srv}}Client,error) {
			c, err := client.Get()
			return &{{unExport(ss.Srv)}}Client{c},err
		}
	}
{% endfor %}
`
