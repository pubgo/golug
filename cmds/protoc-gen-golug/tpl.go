package main

const tpl = `
// Code generated by protoc-gen-golug. DO NOT EDIT.
{%- if !fd.GetOptions().GetDeprecated() %}
// source: {{fd.GetName()}}
{%- else %}
// {{fd.GetName()}} is a deprecated file.
{%- endif %}

package {{pkg}}
import (
	"reflect"

	"github.com/pubgo/golug/gutils"
	"google.golang.org/grpc/metadata"
	"github.com/gofiber/fiber/v2"
	"google.golang.org/grpc"
	"github.com/pubgo/golug/xgen"
	"github.com/pubgo/golug/client/grpclient"
)

var _=gutils.Decode

{% for ss in fd.GetService() %}
	func init() {
		var mthList []xgen.GrpcRestHandler
		{%- for m in ss.GetMethod() %}
			mthList = append(mthList, xgen.GrpcRestHandler{
				Service:      "{{pkg}}.{{ss.Name}}",
				Name:         "{{m.GetName()}}",
				Method:       "{{m.HttpMethod}}",
				Path:          "{{m.HttpPath}}",
				ClientStream:  "{{m.CS}}"=="True",
				ServerStreams: "{{m.SS}}"=="True",
			})
		{% endfor %}
		xgen.Add(reflect.ValueOf(Register{{ss.Srv}}Server),mthList)
		xgen.Add(reflect.ValueOf(Register{{ss.Srv}}Gateway), nil)
	}
{% endfor %}

{% for ss in fd.GetService() %}
	func Get{{ss.Srv}}Client(srv string, opts ...grpc.DialOption) ({{ss.Srv}}Client,error) {
		c,err:=grpclient.Client(srv, opts...).Get()
		return &{{unExport(ss.Srv)}}Client{c},err
	}
{% endfor %}


{% for ss in fd.GetService() %}
	func Register{{ss.Srv}}Gateway(srv string, g fiber.Router,opts ...grpc.DialOption) error {
		client := grpclient.Client(srv, opts...)
		{%- for m in ss.GetMethod() %}
			{%- if !m.CS and !m.SS and (m.HttpMethod=="POST" or m.HttpMethod=="GET" or m.HttpMethod=="PUT") %}
				g.Add("{{m.HttpMethod}}", "{{m.HttpPath}}", func(ctx *fiber.Ctx) error {
					p := metadata.Pairs()
					ctx.Request().Header.VisitAll(func(key, value []byte) { p.Set(string(key), string(value)) })

					var req {{m.GetInputType()}}					
					{%- if m.HttpMethod=="POST" or m.HttpMethod=="PUT" %}
						if err:=ctx.BodyParser(&req);err!=nil{
							return err
						}
					{%- else %}
						var data = make(map[string]interface{})
						ctx.Context().QueryArgs().VisitAll(func(key, value []byte) { data[string(key)] = string(value) })
						if err := gutils.Decode(data, &req); err != nil {
							return err
						}
					{%- endif %}

					conn,err:=client.Get()
					if err!=nil{
						return err
					}
					c:=&{{unExport(ss.Srv)}}Client{conn}
					resp,err:=c.{{m.GetName()}}(metadata.NewIncomingContext(ctx.Context(), p),&req)
					if err!=nil{
						return err
					}
					return ctx.JSON(resp)
				})
			{%- endif %}
		{% endfor %}
		return nil
	}
{% endfor %}
`
