syntax = "proto3";

package sql;

import "google/protobuf/descriptor.proto";

option go_package = "./;sql";

extend google.protobuf.MessageOptions {
    string all = 90001;
}

extend google.protobuf.FileOptions {
    optional string pkg = 560003;
}

extend google.protobuf.MethodOptions {
    optional MOpts opts = 560004;
}

extend google.protobuf.ServiceOptions {
    optional QueryOpts ql = 560000;
    optional TypeMapping mapping = 560001;
    optional PersistenceOptions service_type = 560002;
}

extend google.protobuf.FieldOptions {
    optional bool mapped_field = 560006;
}

enum PersistenceOptions {
    // SQL Query
    SQL = 0;
    SPANNER = 1;
}

message QueryOpts {
    repeated QLImpl queries = 1;
    map<string,string> values = 2;
}

message QLImpl {
    // the query string with numeric placeholders for parameters
    // its an array to allow the query to span across multiple lines but it
    // will be joined and used as a single sql query string at generation time
    repeated string query = 1;

    // if provided, persist will rewrite the query string in the generated code
    // replacing "@field_name" (no quotes) with "?" or "$<position>"
    // if unprovided, persist will not rewrite the query string
    optional string pm_strategy = 2;
    // name of this query.  must be unique to the service.
    string name = 3;
    // the message type that matches the parameters
    // Input rpc messages will be converted to this type
    // they will be used in the parameters in the query
    // The INTERFACE of this message will be used for parameters
    // in the generated query function.
    // if absent, this query takes no  parameters.
    // The query does not have to use all the fields of this type as parameters,
    // but it cannot use any parameter NOT listed here.
    optional string in = 4;
    // the message type that matches what the query returns.
    // This entity message will be converted to the output type
    // input/output messages on rpc calls will have their fields ignored if they
    // don't match this entity.
    // the generated query function will return this message type
    // if absent, this query returns nothing, and .
    // The query does not have to return a fully populated message,
    // but additional rows returned from the query that do NOT exist on
    // the out message will be ignored.
    optional string out = 5;
    // iterator.Unwrap() will support the common fields between these types, and "out"
    // repeated string out_aliases = 6;
    // QUESTIONS:
    // can we do anything special if:
    // - if in and out are the same type,
    // - if in and out are both absent,
    // - if multiple queries were to be used, and they matched in/out types
}
message MOpts {
    // must match a name of a QLImpl query in the service.
    string query = 1;
    // the before function will be called before running any sql code for
    // every input data element and if the return will be not empty/nil and
    // the error will be nil the data returned by this function will be
    // returned by the function skipping the code execution
    optional bool before = 10;
    // the after function will be called after running any sql code for
    // every output data element, the return data of this function will be ignored
    optional bool after = 11;
}

message TypeMapping {
    message TypeDescriptor {
        // if this is not setup the proto_type must be one of the built-in types
        optional string proto_type_name = 1;
        // If proto_type_name is set, this need not be set.  If both this and proto_type_name
        // are set, this must be one of TYPE_ENUM, TYPE_MESSAGE
        // TYPE_GROUP is not supported
        optional string proto_type = 2;
        // if proto_label is not setup we consider any option except LABAEL_REPEATED
        optional string proto_label = 3;
    }
    repeated TypeDescriptor types = 1;
}