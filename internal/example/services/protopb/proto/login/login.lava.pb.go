// Code generated by protoc-gen-lava. DO NOT EDIT.
// versions:
// - protoc-gen-lava v0.1.0
// - protoc         v3.17.3
// source: proto/login/login.proto

package login

import (
	gin "github.com/gin-gonic/gin"
	grpcc "github.com/pubgo/lava/clients/grpcc"
	xgen "github.com/pubgo/lava/xgen"
	xerror "github.com/pubgo/xerror"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

func GetLoginClient(srv string, opts ...func(cfg *grpcc.Cfg)) LoginClient {
	return &loginClient{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &LoginRequest{},
		Output:       &LoginResponse{},
		Service:      "login.Login",
		Name:         "Login",
		Method:       "POST",
		Path:         "/user/login/login",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &AuthenticateRequest{},
		Output:       &AuthenticateResponse{},
		Service:      "login.Login",
		Name:         "Authenticate",
		Method:       "POST",
		Path:         "/user/login/authenticate",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterLoginServer, mthList)
	xgen.Add(RegisterLoginHandler, nil)
	xgen.Add(RegisterLoginGinServer, nil)
}
func RegisterLoginGinServer(r gin.IRouter, server LoginServer) {
	xerror.Assert(r == nil || server == nil, "router or server is nil")
	r.Handle("POST", "/user/login/login", func(ctx *gin.Context) {
		var req = new(LoginRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Login(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user/login/authenticate", func(ctx *gin.Context) {
		var req = new(AuthenticateRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Authenticate(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
}
