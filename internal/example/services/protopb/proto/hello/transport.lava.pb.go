// Code generated by protoc-gen-lava. DO NOT EDIT.
// versions:
// - protoc-gen-lava v0.1.0
// - protoc         v3.17.3
// source: proto/hello/transport.proto

package hello

import (
	gin "github.com/gin-gonic/gin"
	grpcc "github.com/pubgo/lava/clients/grpcc"
	binding "github.com/pubgo/lava/pkg/binding"
	xgen "github.com/pubgo/lava/xgen"
	xerror "github.com/pubgo/xerror"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

func GetTransportClient(srv string, opts ...func(cfg *grpcc.Cfg)) TransportClient {
	return &transportClient{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &Message{},
		Output:       &Message{},
		Service:      "hello.Transport",
		Name:         "TestStream",
		Method:       "POST",
		Path:         "/hello/transport/test-stream",
		DefaultUrl:   true,
		ClientStream: true,
		ServerStream: true,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &Message{},
		Output:       &Message{},
		Service:      "hello.Transport",
		Name:         "TestStream1",
		Method:       "POST",
		Path:         "/hello/transport/test-stream1",
		DefaultUrl:   true,
		ClientStream: true,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &Message{},
		Output:       &Message{},
		Service:      "hello.Transport",
		Name:         "TestStream2",
		Method:       "POST",
		Path:         "/hello/transport/test-stream2",
		DefaultUrl:   true,
		ClientStream: false,
		ServerStream: true,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &Message{},
		Output:       &Message{},
		Service:      "hello.Transport",
		Name:         "TestStream3",
		Method:       "GET",
		Path:         "/v1/Transport/TestStream3",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterTransportServer, mthList)
	xgen.Add(RegisterTransportGinServer, nil)
}
func RegisterTransportGinServer(r gin.IRouter, server TransportServer) {
	xerror.Assert(r == nil || server == nil, "router or server is nil")
	r.Handle("GET", "/v1/Transport/TestStream3", func(ctx *gin.Context) {
		var req = new(Message)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.TestStream3(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
}
