// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hello

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TransportClient is the client API for Transport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportClient interface {
	TestStream(ctx context.Context, opts ...grpc.CallOption) (Transport_TestStreamClient, error)
	TestStream1(ctx context.Context, opts ...grpc.CallOption) (Transport_TestStream1Client, error)
	TestStream2(ctx context.Context, in *Message, opts ...grpc.CallOption) (Transport_TestStream2Client, error)
	TestStream3(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type transportClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportClient(cc grpc.ClientConnInterface) TransportClient {
	return &transportClient{cc}
}

func (c *transportClient) TestStream(ctx context.Context, opts ...grpc.CallOption) (Transport_TestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Transport_serviceDesc.Streams[0], "/hello.Transport/TestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportTestStreamClient{stream}
	return x, nil
}

type Transport_TestStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type transportTestStreamClient struct {
	grpc.ClientStream
}

func (x *transportTestStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportTestStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportClient) TestStream1(ctx context.Context, opts ...grpc.CallOption) (Transport_TestStream1Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Transport_serviceDesc.Streams[1], "/hello.Transport/TestStream1", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportTestStream1Client{stream}
	return x, nil
}

type Transport_TestStream1Client interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type transportTestStream1Client struct {
	grpc.ClientStream
}

func (x *transportTestStream1Client) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportTestStream1Client) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportClient) TestStream2(ctx context.Context, in *Message, opts ...grpc.CallOption) (Transport_TestStream2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_Transport_serviceDesc.Streams[2], "/hello.Transport/TestStream2", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportTestStream2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Transport_TestStream2Client interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type transportTestStream2Client struct {
	grpc.ClientStream
}

func (x *transportTestStream2Client) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportClient) TestStream3(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/hello.Transport/TestStream3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportServer is the server API for Transport service.
// All implementations should embed UnimplementedTransportServer
// for forward compatibility
type TransportServer interface {
	TestStream(Transport_TestStreamServer) error
	TestStream1(Transport_TestStream1Server) error
	TestStream2(*Message, Transport_TestStream2Server) error
	TestStream3(context.Context, *Message) (*Message, error)
}

// UnimplementedTransportServer should be embedded to have forward compatible implementations.
type UnimplementedTransportServer struct {
}

func (UnimplementedTransportServer) TestStream(Transport_TestStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStream not implemented")
}
func (UnimplementedTransportServer) TestStream1(Transport_TestStream1Server) error {
	return status.Errorf(codes.Unimplemented, "method TestStream1 not implemented")
}
func (UnimplementedTransportServer) TestStream2(*Message, Transport_TestStream2Server) error {
	return status.Errorf(codes.Unimplemented, "method TestStream2 not implemented")
}
func (UnimplementedTransportServer) TestStream3(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestStream3 not implemented")
}

// UnsafeTransportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportServer will
// result in compilation errors.
type UnsafeTransportServer interface {
	mustEmbedUnimplementedTransportServer()
}

func RegisterTransportServer(s grpc.ServiceRegistrar, srv TransportServer) {
	s.RegisterService(&_Transport_serviceDesc, srv)
}

func _Transport_TestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServer).TestStream(&transportTestStreamServer{stream})
}

type Transport_TestStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type transportTestStreamServer struct {
	grpc.ServerStream
}

func (x *transportTestStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportTestStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transport_TestStream1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServer).TestStream1(&transportTestStream1Server{stream})
}

type Transport_TestStream1Server interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type transportTestStream1Server struct {
	grpc.ServerStream
}

func (x *transportTestStream1Server) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportTestStream1Server) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transport_TestStream2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransportServer).TestStream2(m, &transportTestStream2Server{stream})
}

type Transport_TestStream2Server interface {
	Send(*Message) error
	grpc.ServerStream
}

type transportTestStream2Server struct {
	grpc.ServerStream
}

func (x *transportTestStream2Server) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Transport_TestStream3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).TestStream3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.Transport/TestStream3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).TestStream3(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transport_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.Transport",
	HandlerType: (*TransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestStream3",
			Handler:    _Transport_TestStream3_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestStream",
			Handler:       _Transport_TestStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TestStream1",
			Handler:       _Transport_TestStream1_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TestStream2",
			Handler:       _Transport_TestStream2_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/hello/transport.proto",
}
