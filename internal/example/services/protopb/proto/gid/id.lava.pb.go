// Code generated by protoc-gen-lava. DO NOT EDIT.
// versions:
// - protoc-gen-lava v0.1.0
// - protoc         v3.17.3
// source: proto/gid/id.proto

package gid

import (
	gin "github.com/gin-gonic/gin"
	fiber "github.com/pubgo/lava/builder/fiber"
	grpcc "github.com/pubgo/lava/clients/grpcc"
	binding "github.com/pubgo/lava/pkg/binding"
	xgen "github.com/pubgo/lava/xgen"
	byteutil "github.com/pubgo/x/byteutil"
	xerror "github.com/pubgo/xerror"
	grpc "google.golang.org/grpc"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

func GetIdClient(srv string, opts ...func(cfg *grpcc.Cfg)) IdClient {
	return &idClient{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &GenerateRequest{},
		Output:       &GenerateResponse{},
		Service:      "gid.Id",
		Name:         "Generate",
		Method:       "POST",
		Path:         "/v1/id/generate",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &TypesRequest{},
		Output:       &TypesResponse{},
		Service:      "gid.Id",
		Name:         "Types",
		Method:       "GET",
		Path:         "/v1/id/types",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterIdServer, mthList)
	xgen.Add(RegisterIdHandler, nil)
	xgen.Add(RegisterIdRestServer, nil)
	xgen.Add(RegisterIdGinServer, nil)
}
func RegisterIdRestServer(app fiber.Router, server IdServer) {
	xerror.Assert(app == nil || server == nil, "app or server is nil")
	app.Add("POST", "/v1/id/generate", func(ctx *fiber.Ctx) error {
		var req = new(GenerateRequest)
		xerror.Panic(ctx.BodyParser(req))
		var resp, err = server.Generate(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("GET", "/v1/id/types", func(ctx *fiber.Ctx) error {
		var req = new(TypesRequest)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := byteutil.ToStr(key)
			v := byteutil.ToStr(val)
			data[k] = append(data[k], v)
		})
		xerror.Panic(binding.MapFormByTag(req, data, "json"))
		var resp, err = server.Types(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
}
func RegisterIdGinServer(r gin.IRouter, server IdServer) {
	xerror.Assert(r == nil || server == nil, "router or server is nil")
	r.Handle("POST", "/v1/id/generate", func(ctx *gin.Context) {
		var req = new(GenerateRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Generate(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("GET", "/v1/id/types", func(ctx *gin.Context) {
		var req = new(TypesRequest)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.Types(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
}
func GetABitOfEverythingServiceClient(srv string, opts ...func(cfg *grpcc.Cfg)) ABitOfEverythingServiceClient {
	return &aBitOfEverythingServiceClient{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ABitOfEverything{},
		Output:       &ABitOfEverything{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "Create",
		Method:       "POST",
		Path:         "/v1/example/a_bit_of_everything/{float_value}/{double_value}/{int64_value}/separator/{uint64_value}/{int32_value}/{fixed64_value}/{fixed32_value}/{bool_value}/{string_value=strprefix/*}/{uint32_value}/{sfixed32_value}/{sfixed64_value}/{sint32_value}/{sint64_value}/{nonConventionalNameValue}/{enum_value}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ABitOfEverything{},
		Output:       &ABitOfEverything{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "CreateBody",
		Method:       "POST",
		Path:         "/v1/example/a_bit_of_everything",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &CreateBookRequest{},
		Output:       &Book{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "CreateBook",
		Method:       "POST",
		Path:         "/v1/{parent=publishers/*}/books",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &UpdateBookRequest{},
		Output:       &Book{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "UpdateBook",
		Method:       "PATCH",
		Path:         "/v1/{book.name=publishers/*/books/*}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ABitOfEverything{},
		Output:       &emptypb.Empty{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "Update",
		Method:       "PUT",
		Path:         "/v1/example/a_bit_of_everything/{uuid}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &UpdateV2Request{},
		Output:       &emptypb.Empty{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "UpdateV2",
		Method:       "PUT",
		Path:         "/v2/example/a_bit_of_everything/{abe.uuid}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ABitOfEverything{},
		Output:       &emptypb.Empty{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "GetQuery",
		Method:       "GET",
		Path:         "/v1/example/a_bit_of_everything/query/{uuid}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ABitOfEverythingRepeated{},
		Output:       &ABitOfEverythingRepeated{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "GetRepeatedQuery",
		Method:       "GET",
		Path:         "/v1/example/a_bit_of_everything_repeated/{path_repeated_float_value}/{path_repeated_double_value}/{path_repeated_int64_value}/{path_repeated_uint64_value}/{path_repeated_int32_value}/{path_repeated_fixed64_value}/{path_repeated_fixed32_value}/{path_repeated_bool_value}/{path_repeated_string_value}/{path_repeated_bytes_value}/{path_repeated_uint32_value}/{path_repeated_enum_value}/{path_repeated_sfixed32_value}/{path_repeated_sfixed64_value}/{path_repeated_sint32_value}/{path_repeated_sint64_value}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ABitOfEverything{},
		Output:       &ABitOfEverything{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "DeepPathEcho",
		Method:       "POST",
		Path:         "/v1/example/deep_path/{single_nested.name}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &durationpb.Duration{},
		Output:       &emptypb.Empty{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "NoBindings",
		Method:       "GET",
		Path:         "/v2/example/NoBindings",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &emptypb.Empty{},
		Output:       &emptypb.Empty{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "Timeout",
		Method:       "GET",
		Path:         "/v2/example/timeout",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &emptypb.Empty{},
		Output:       &emptypb.Empty{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "ErrorWithDetails",
		Method:       "GET",
		Path:         "/v2/example/errorwithdetails",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &MessageWithBody{},
		Output:       &emptypb.Empty{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "GetMessageWithBody",
		Method:       "POST",
		Path:         "/v2/example/withbody/{id}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &Body{},
		Output:       &emptypb.Empty{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "PostWithEmptyBody",
		Method:       "POST",
		Path:         "/v2/example/postwithemptybody/{name}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ABitOfEverything{},
		Output:       &ABitOfEverything{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "CheckGetQueryParams",
		Method:       "GET",
		Path:         "/v1/example/a_bit_of_everything/params/get/{single_nested.name}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ABitOfEverything{},
		Output:       &ABitOfEverything{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "CheckNestedEnumGetQueryParams",
		Method:       "GET",
		Path:         "/v1/example/a_bit_of_everything/params/get/nested_enum/{single_nested.ok}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &ABitOfEverything{},
		Output:       &ABitOfEverything{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "CheckPostQueryParams",
		Method:       "POST",
		Path:         "/v1/example/a_bit_of_everything/params/post/{string_value}",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &emptypb.Empty{},
		Output:       &wrapperspb.StringValue{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "OverwriteResponseContentType",
		Method:       "GET",
		Path:         "/v2/example/overwriteresponsecontenttype",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &emptypb.Empty{},
		Output:       &CheckStatusResponse{},
		Service:      "gid.ABitOfEverythingService",
		Name:         "CheckStatus",
		Method:       "GET",
		Path:         "/v1/example/checkStatus",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterABitOfEverythingServiceServer, mthList)
	xgen.Add(RegisterABitOfEverythingServiceHandler, nil)
	xgen.Add(RegisterABitOfEverythingServiceRestServer, nil)
	xgen.Add(RegisterABitOfEverythingServiceGinServer, nil)
}
func RegisterABitOfEverythingServiceRestServer(app fiber.Router, server ABitOfEverythingServiceServer) {
	xerror.Assert(app == nil || server == nil, "app or server is nil")
	app.Add("POST", "/v1/example/a_bit_of_everything/{float_value}/{double_value}/{int64_value}/separator/{uint64_value}/{int32_value}/{fixed64_value}/{fixed32_value}/{bool_value}/{string_value=strprefix/*}/{uint32_value}/{sfixed32_value}/{sfixed64_value}/{sint32_value}/{sint64_value}/{nonConventionalNameValue}/{enum_value}", func(ctx *fiber.Ctx) error {
		var req = new(ABitOfEverything)
		xerror.Panic(ctx.BodyParser(req))
		var resp, err = server.Create(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("POST", "/v1/example/a_bit_of_everything", func(ctx *fiber.Ctx) error {
		var req = new(ABitOfEverything)
		xerror.Panic(ctx.BodyParser(req))
		var resp, err = server.CreateBody(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("POST", "/v1/{parent=publishers/*}/books", func(ctx *fiber.Ctx) error {
		var req = new(CreateBookRequest)
		xerror.Panic(ctx.BodyParser(req))
		var resp, err = server.CreateBook(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("PATCH", "/v1/{book.name=publishers/*/books/*}", func(ctx *fiber.Ctx) error {
		var req = new(UpdateBookRequest)
		xerror.Panic(ctx.BodyParser(req))
		var resp, err = server.UpdateBook(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("PUT", "/v1/example/a_bit_of_everything/{uuid}", func(ctx *fiber.Ctx) error {
		var req = new(ABitOfEverything)
		xerror.Panic(ctx.BodyParser(req))
		var resp, err = server.Update(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("PUT", "/v2/example/a_bit_of_everything/{abe.uuid}", func(ctx *fiber.Ctx) error {
		var req = new(UpdateV2Request)
		xerror.Panic(ctx.BodyParser(req))
		var resp, err = server.UpdateV2(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("GET", "/v1/example/a_bit_of_everything/query/{uuid}", func(ctx *fiber.Ctx) error {
		var req = new(ABitOfEverything)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := byteutil.ToStr(key)
			v := byteutil.ToStr(val)
			data[k] = append(data[k], v)
		})
		xerror.Panic(binding.MapFormByTag(req, data, "json"))
		var resp, err = server.GetQuery(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("GET", "/v1/example/a_bit_of_everything_repeated/{path_repeated_float_value}/{path_repeated_double_value}/{path_repeated_int64_value}/{path_repeated_uint64_value}/{path_repeated_int32_value}/{path_repeated_fixed64_value}/{path_repeated_fixed32_value}/{path_repeated_bool_value}/{path_repeated_string_value}/{path_repeated_bytes_value}/{path_repeated_uint32_value}/{path_repeated_enum_value}/{path_repeated_sfixed32_value}/{path_repeated_sfixed64_value}/{path_repeated_sint32_value}/{path_repeated_sint64_value}", func(ctx *fiber.Ctx) error {
		var req = new(ABitOfEverythingRepeated)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := byteutil.ToStr(key)
			v := byteutil.ToStr(val)
			data[k] = append(data[k], v)
		})
		xerror.Panic(binding.MapFormByTag(req, data, "json"))
		var resp, err = server.GetRepeatedQuery(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("POST", "/v1/example/deep_path/{single_nested.name}", func(ctx *fiber.Ctx) error {
		var req = new(ABitOfEverything)
		xerror.Panic(ctx.BodyParser(req))
		var resp, err = server.DeepPathEcho(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("GET", "/v2/example/NoBindings", func(ctx *fiber.Ctx) error {
		var req = new(durationpb.Duration)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := byteutil.ToStr(key)
			v := byteutil.ToStr(val)
			data[k] = append(data[k], v)
		})
		xerror.Panic(binding.MapFormByTag(req, data, "json"))
		var resp, err = server.NoBindings(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("GET", "/v2/example/timeout", func(ctx *fiber.Ctx) error {
		var req = new(emptypb.Empty)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := byteutil.ToStr(key)
			v := byteutil.ToStr(val)
			data[k] = append(data[k], v)
		})
		xerror.Panic(binding.MapFormByTag(req, data, "json"))
		var resp, err = server.Timeout(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("GET", "/v2/example/errorwithdetails", func(ctx *fiber.Ctx) error {
		var req = new(emptypb.Empty)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := byteutil.ToStr(key)
			v := byteutil.ToStr(val)
			data[k] = append(data[k], v)
		})
		xerror.Panic(binding.MapFormByTag(req, data, "json"))
		var resp, err = server.ErrorWithDetails(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("POST", "/v2/example/withbody/{id}", func(ctx *fiber.Ctx) error {
		var req = new(MessageWithBody)
		xerror.Panic(ctx.BodyParser(req))
		var resp, err = server.GetMessageWithBody(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("POST", "/v2/example/postwithemptybody/{name}", func(ctx *fiber.Ctx) error {
		var req = new(Body)
		xerror.Panic(ctx.BodyParser(req))
		var resp, err = server.PostWithEmptyBody(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("GET", "/v1/example/a_bit_of_everything/params/get/{single_nested.name}", func(ctx *fiber.Ctx) error {
		var req = new(ABitOfEverything)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := byteutil.ToStr(key)
			v := byteutil.ToStr(val)
			data[k] = append(data[k], v)
		})
		xerror.Panic(binding.MapFormByTag(req, data, "json"))
		var resp, err = server.CheckGetQueryParams(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("GET", "/v1/example/a_bit_of_everything/params/get/nested_enum/{single_nested.ok}", func(ctx *fiber.Ctx) error {
		var req = new(ABitOfEverything)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := byteutil.ToStr(key)
			v := byteutil.ToStr(val)
			data[k] = append(data[k], v)
		})
		xerror.Panic(binding.MapFormByTag(req, data, "json"))
		var resp, err = server.CheckNestedEnumGetQueryParams(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("POST", "/v1/example/a_bit_of_everything/params/post/{string_value}", func(ctx *fiber.Ctx) error {
		var req = new(ABitOfEverything)
		xerror.Panic(ctx.BodyParser(req))
		var resp, err = server.CheckPostQueryParams(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("GET", "/v2/example/overwriteresponsecontenttype", func(ctx *fiber.Ctx) error {
		var req = new(emptypb.Empty)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := byteutil.ToStr(key)
			v := byteutil.ToStr(val)
			data[k] = append(data[k], v)
		})
		xerror.Panic(binding.MapFormByTag(req, data, "json"))
		var resp, err = server.OverwriteResponseContentType(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
	app.Add("GET", "/v1/example/checkStatus", func(ctx *fiber.Ctx) error {
		var req = new(emptypb.Empty)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := byteutil.ToStr(key)
			v := byteutil.ToStr(val)
			data[k] = append(data[k], v)
		})
		xerror.Panic(binding.MapFormByTag(req, data, "json"))
		var resp, err = server.CheckStatus(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
}
func RegisterABitOfEverythingServiceGinServer(r gin.IRouter, server ABitOfEverythingServiceServer) {
	xerror.Assert(r == nil || server == nil, "router or server is nil")
	r.Handle("POST", "/v1/example/a_bit_of_everything/{float_value}/{double_value}/{int64_value}/separator/{uint64_value}/{int32_value}/{fixed64_value}/{fixed32_value}/{bool_value}/{string_value=strprefix/*}/{uint32_value}/{sfixed32_value}/{sfixed64_value}/{sint32_value}/{sint64_value}/{nonConventionalNameValue}/{enum_value}", func(ctx *gin.Context) {
		var req = new(ABitOfEverything)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Create(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/v1/example/a_bit_of_everything", func(ctx *gin.Context) {
		var req = new(ABitOfEverything)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.CreateBody(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/v1/{parent=publishers/*}/books", func(ctx *gin.Context) {
		var req = new(CreateBookRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.CreateBook(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("PATCH", "/v1/{book.name=publishers/*/books/*}", func(ctx *gin.Context) {
		var req = new(UpdateBookRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.UpdateBook(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("PUT", "/v1/example/a_bit_of_everything/{uuid}", func(ctx *gin.Context) {
		var req = new(ABitOfEverything)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Update(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("PUT", "/v2/example/a_bit_of_everything/{abe.uuid}", func(ctx *gin.Context) {
		var req = new(UpdateV2Request)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.UpdateV2(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("GET", "/v1/example/a_bit_of_everything/query/{uuid}", func(ctx *gin.Context) {
		var req = new(ABitOfEverything)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.GetQuery(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("GET", "/v1/example/a_bit_of_everything_repeated/{path_repeated_float_value}/{path_repeated_double_value}/{path_repeated_int64_value}/{path_repeated_uint64_value}/{path_repeated_int32_value}/{path_repeated_fixed64_value}/{path_repeated_fixed32_value}/{path_repeated_bool_value}/{path_repeated_string_value}/{path_repeated_bytes_value}/{path_repeated_uint32_value}/{path_repeated_enum_value}/{path_repeated_sfixed32_value}/{path_repeated_sfixed64_value}/{path_repeated_sint32_value}/{path_repeated_sint64_value}", func(ctx *gin.Context) {
		var req = new(ABitOfEverythingRepeated)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.GetRepeatedQuery(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/v1/example/deep_path/{single_nested.name}", func(ctx *gin.Context) {
		var req = new(ABitOfEverything)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.DeepPathEcho(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("GET", "/v2/example/NoBindings", func(ctx *gin.Context) {
		var req = new(durationpb.Duration)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.NoBindings(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("GET", "/v2/example/timeout", func(ctx *gin.Context) {
		var req = new(emptypb.Empty)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.Timeout(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("GET", "/v2/example/errorwithdetails", func(ctx *gin.Context) {
		var req = new(emptypb.Empty)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.ErrorWithDetails(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/v2/example/withbody/{id}", func(ctx *gin.Context) {
		var req = new(MessageWithBody)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.GetMessageWithBody(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/v2/example/postwithemptybody/{name}", func(ctx *gin.Context) {
		var req = new(Body)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.PostWithEmptyBody(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("GET", "/v1/example/a_bit_of_everything/params/get/{single_nested.name}", func(ctx *gin.Context) {
		var req = new(ABitOfEverything)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.CheckGetQueryParams(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("GET", "/v1/example/a_bit_of_everything/params/get/nested_enum/{single_nested.ok}", func(ctx *gin.Context) {
		var req = new(ABitOfEverything)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.CheckNestedEnumGetQueryParams(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/v1/example/a_bit_of_everything/params/post/{string_value}", func(ctx *gin.Context) {
		var req = new(ABitOfEverything)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.CheckPostQueryParams(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("GET", "/v2/example/overwriteresponsecontenttype", func(ctx *gin.Context) {
		var req = new(emptypb.Empty)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.OverwriteResponseContentType(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("GET", "/v1/example/checkStatus", func(ctx *gin.Context) {
		var req = new(emptypb.Empty)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.CheckStatus(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
}
func GetCamelCaseServiceNameClient(srv string, opts ...func(cfg *grpcc.Cfg)) CamelCaseServiceNameClient {
	return &camelCaseServiceNameClient{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &emptypb.Empty{},
		Output:       &emptypb.Empty{},
		Service:      "gid.CamelCaseServiceName",
		Name:         "Empty",
		Method:       "GET",
		Path:         "/v2/example/empty",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterCamelCaseServiceNameServer, mthList)
	xgen.Add(RegisterCamelCaseServiceNameHandler, nil)
	xgen.Add(RegisterCamelCaseServiceNameRestServer, nil)
	xgen.Add(RegisterCamelCaseServiceNameGinServer, nil)
}
func RegisterCamelCaseServiceNameRestServer(app fiber.Router, server CamelCaseServiceNameServer) {
	xerror.Assert(app == nil || server == nil, "app or server is nil")
	app.Add("GET", "/v2/example/empty", func(ctx *fiber.Ctx) error {
		var req = new(emptypb.Empty)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := byteutil.ToStr(key)
			v := byteutil.ToStr(val)
			data[k] = append(data[k], v)
		})
		xerror.Panic(binding.MapFormByTag(req, data, "json"))
		var resp, err = server.Empty(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
}
func RegisterCamelCaseServiceNameGinServer(r gin.IRouter, server CamelCaseServiceNameServer) {
	xerror.Assert(r == nil || server == nil, "router or server is nil")
	r.Handle("GET", "/v2/example/empty", func(ctx *gin.Context) {
		var req = new(emptypb.Empty)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.Empty(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
}
func GetAnotherServiceWithNoBindingsClient(srv string, opts ...func(cfg *grpcc.Cfg)) AnotherServiceWithNoBindingsClient {
	return &anotherServiceWithNoBindingsClient{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &emptypb.Empty{},
		Output:       &emptypb.Empty{},
		Service:      "gid.AnotherServiceWithNoBindings",
		Name:         "NoBindings",
		Method:       "GET",
		Path:         "/v2/another/no-bindings",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterAnotherServiceWithNoBindingsServer, mthList)
	xgen.Add(RegisterAnotherServiceWithNoBindingsHandler, nil)
	xgen.Add(RegisterAnotherServiceWithNoBindingsRestServer, nil)
	xgen.Add(RegisterAnotherServiceWithNoBindingsGinServer, nil)
}
func RegisterAnotherServiceWithNoBindingsRestServer(app fiber.Router, server AnotherServiceWithNoBindingsServer) {
	xerror.Assert(app == nil || server == nil, "app or server is nil")
	app.Add("GET", "/v2/another/no-bindings", func(ctx *fiber.Ctx) error {
		var req = new(emptypb.Empty)
		data := make(map[string][]string)
		ctx.Context().QueryArgs().VisitAll(func(key []byte, val []byte) {
			k := byteutil.ToStr(key)
			v := byteutil.ToStr(val)
			data[k] = append(data[k], v)
		})
		xerror.Panic(binding.MapFormByTag(req, data, "json"))
		var resp, err = server.NoBindings(ctx.UserContext(), req)
		xerror.Panic(err)
		return xerror.Wrap(ctx.JSON(resp))
	})
}
func RegisterAnotherServiceWithNoBindingsGinServer(r gin.IRouter, server AnotherServiceWithNoBindingsServer) {
	xerror.Assert(r == nil || server == nil, "router or server is nil")
	r.Handle("GET", "/v2/another/no-bindings", func(ctx *gin.Context) {
		var req = new(emptypb.Empty)
		xerror.Panic(binding.MapFormByTag(req, ctx.Request.URL.Query(), "json"))
		var resp, err = server.NoBindings(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
}
