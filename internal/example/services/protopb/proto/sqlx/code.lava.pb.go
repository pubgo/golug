// Code generated by protoc-gen-lava. DO NOT EDIT.
// versions:
// - protoc-gen-lava v0.1.0
// - protoc         v3.17.3
// source: proto/sqlx/code.proto

package sqlx

import (
	gin "github.com/gin-gonic/gin"
	grpcc "github.com/pubgo/lava/clients/grpcc"
	xgen "github.com/pubgo/lava/xgen"
	xerror "github.com/pubgo/xerror"
	grpc "google.golang.org/grpc"
	gorm "gorm.io/gorm"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

func GetCodeClient(srv string, opts ...func(cfg *grpcc.Cfg)) CodeClient {
	return &codeClient{grpcc.GetClient(srv, opts...)}
}
func init() {
	var mthList []xgen.GrpcRestHandler
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &SendCodeRequest{},
		Output:       &SendCodeResponse{},
		Service:      "sqlx.Code",
		Name:         "SendCode",
		Method:       "POST",
		Path:         "/user/code/send-code",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &VerifyRequest{},
		Output:       &VerifyResponse{},
		Service:      "sqlx.Code",
		Name:         "Verify",
		Method:       "POST",
		Path:         "/user/code/verify",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &IsCheckImageCodeRequest{},
		Output:       &IsCheckImageCodeResponse{},
		Service:      "sqlx.Code",
		Name:         "IsCheckImageCode",
		Method:       "POST",
		Path:         "/user/code/is-check-image-code",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &VerifyImageCodeRequest{},
		Output:       &VerifyImageCodeResponse{},
		Service:      "sqlx.Code",
		Name:         "VerifyImageCode",
		Method:       "POST",
		Path:         "/user/code/verify-image-code",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	mthList = append(mthList, xgen.GrpcRestHandler{
		Input:        &GetSendStatusRequest{},
		Output:       &GetSendStatusResponse{},
		Service:      "sqlx.Code",
		Name:         "GetSendStatus",
		Method:       "POST",
		Path:         "/user/code/get-send-status",
		DefaultUrl:   false,
		ClientStream: false,
		ServerStream: false,
	})
	xgen.Add(RegisterCodeServer, mthList)
	xgen.Add(RegisterCodeHandler, nil)
	xgen.Add(RegisterCodeGinServer, nil)
}
func RegisterCodeGinServer(r gin.IRouter, server CodeServer) {
	xerror.Assert(r == nil || server == nil, "router or server is nil")
	r.Handle("POST", "/user/code/send-code", func(ctx *gin.Context) {
		var req = new(SendCodeRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.SendCode(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user/code/verify", func(ctx *gin.Context) {
		var req = new(VerifyRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.Verify(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user/code/is-check-image-code", func(ctx *gin.Context) {
		var req = new(IsCheckImageCodeRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.IsCheckImageCode(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user/code/verify-image-code", func(ctx *gin.Context) {
		var req = new(VerifyImageCodeRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.VerifyImageCode(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
	r.Handle("POST", "/user/code/get-send-status", func(ctx *gin.Context) {
		var req = new(GetSendStatusRequest)
		xerror.Panic(ctx.ShouldBindJSON(req))
		var resp, err = server.GetSendStatus(ctx, req)
		xerror.Panic(err)
		ctx.JSON(200, resp)
	})
}
func Code_SendCodeRaw(db *gorm.DB, arg *SendCodeRequest) *gorm.DB {
	return db.Exec("insert into", arg)
}
