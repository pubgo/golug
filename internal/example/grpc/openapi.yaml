# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: Id API
    description: Id 生成随机ID服务
    version: 0.0.1
servers:
    - url: https:8080
paths:
    /files/{filename}:
        post:
            tags:
                - Id
            operationId: Id_UploadDownload
            parameters:
                - name: filename
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: string
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        '*/*': {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/id/generate:
        post:
            tags:
                - Id
            description: Generate 生成ID
            operationId: Id_Generate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/GenerateRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GenerateResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/id/types:
        get:
            tags:
                - Id
            description: Types id类型
            operationId: Id_Types
            parameters:
                - name: name
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TypesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/id/types1:
        get:
            tags:
                - Id
            operationId: Id_TypeStream
            parameters:
                - name: name
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TypesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /ws/chat/{sessionId}:
        post:
            tags:
                - Id
            operationId: Id_Chat
            parameters:
                - name: sessionId
                  in: path
                  required: true
                  schema:
                    type: string
                - name: name
                  in: query
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Message'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ChatMessage'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        ChatMessage:
            type: object
            properties:
                name:
                    type: string
                sessionId:
                    type: string
                msg:
                    $ref: '#/components/schemas/Message'
        GenerateRequest:
            type: object
            properties:
                type:
                    enum:
                        - default
                        - uuid
                        - snowflake
                        - bigflake
                        - shortid
                    type: string
                    description: type of id e.g uuid, shortid, snowflake (64 bit), bigflake (128 bit)
                    format: enum
            description: Generate a unique ID. Defaults to uuid.
        GenerateResponse:
            type: object
            properties:
                id:
                    type: string
                    description: the unique id generated
                type:
                    type: string
                    description: the type of id generated
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        Message:
            type: object
            properties:
                name:
                    type: string
                text:
                    type: string
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        TypesResponse:
            type: object
            properties:
                types:
                    type: array
                    items:
                        type: string
            description: TypesResponse 返回值类型
tags:
    - name: Id
